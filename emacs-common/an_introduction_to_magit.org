#+TITLE: 认识Magit
#+URL: https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git
#+AUTHOR: samrayleung
#+CATEGORY: Eshell
#+DATE: <2017-03-01 Wed>
#+OPTIONS: ^:{}
如果你足够幸运(或者不幸运，取决于你怎么看待了)可以使用 /git/ 作为你工作流的一部分。
你可能已经 *邂逅* 过 /magit/ 这个Emacs 的git接口了。 /magit/ 是Emacs 上的非常
优秀的git 接口，它假定你是了解你正在对 /magit/ 或者 /git/ 做的种种操作的
*注意* ：该文章是针对 magit 1.x 的，对 magit 2.x 并不适用
Magit 有非常完整的文档，包含了Magit 的各种操作，但是就是大多数的文档那样，Magit
的文档并没有介绍如何将Magit 和你的工作流完美融合；Magit 假定你是熟悉Magit 并且
了解如何合理地使用Magit(但大多数情况都不是这样).
Magit 现在还是处于活跃的开发中。在2013年12月，增加了很多很多新的很有用特性的一次
release,让Magit 变得比以前更强大了，所以本教程是基于比较新的Magit 版本的，并且
假定你也已经安装了这样的版本
如果想安装处于 *master* 分支的magit,我建议你使用 *Melpa* 来安装；此外你也可以
选择直接拉取[[https://github.com/magit/magit][magit github]] 仓库的最新版本，然后安装README 上面的指导来构建 *magit*
这是我Magit 教程的第一部分。这部分会介绍状态窗口(status window);已暂存和未暂存的
项目 (staging and unstagin item);已经提交的更改 (committing changes) 和查看历史提交
(history view)
* Getting Started
  首先：

  首先：Magit 并没有隐藏git 的复杂性，所以，如果你想高效地使用Magit ,你最好清楚地
  了解git 究竟做了哪些工作。事实上，我更原意把Magit 当作一个取代了git 枯燥的纯命令行
  操作的工具，它也表现得出乎意料地好。
  你可以通过运行 *M-x magit-status* 来使用Magit,该命令会打开一个窗口(如果你的缓冲区
  所在的目录不是一个git 项目，Magit 会提示你进入一个git 项目的目录),然后展示Magit
  当前的状态。你是通过 *magit-status* 这个接口来使用Magit 的。此外，如果你是使用
  Emacs VC的，你需要知道的是，Magit 是没有集成到 Emacs VC(Version Control) 的
  抽象层的。虽然你没法在VC 使用Magit,不过你还是可以在大多数版本控制工具使用Magit 的，
  Magit 为这些版本控制工具都提供了统一的接口；你如果想调用Magit,你只需要运行 *M-x magit-status*
* The Magit Status
  [[https://www.masteringemacs.org/static/uploads/Screenshot-from-2013-12-06-114511.png]]
  你首先会注意到关于Magit的事情应该就是当你打开Magit 的状态窗口时，Magit 的状态窗口
  是可以与你的Emacs 窗口配置很好工作的，你也可以像在其他Emacs 窗口那样，通过按下 *q*
  来关闭窗口。几乎你在Magit 执行的所有操作都是通过在底部打开一个 *command console*
  窗口，然后按下对应的单字符指令执行；你也可以重新定义你自己的指令。这种交互的方式
  真的非常好用，可能正是这种那么强大的特性让Magit变得如此优秀吧。我真的非常喜欢
  这种交互的方式，我甚至把这部分特性的代码复制到了我自己的Emacs项目上，因为这真的
  真的非常好用。
  Magit 之前的稳定版本在帮助用户更好使用Magit 这方面做得略有不足，所以在最新的
  版本有了相应的改进，你可以通过按下 *?* 来显示一系列带注解说明的操作。我觉得在开始
  的时候，Magit 真的很难用，因为我总是总是在 *茫茫* 的菜单选项中迷失，好不容易
  才能找到我想要的操作。即使是现在，也并不是所有的操作都有注解说明了；有一些命令
  (对于我的工作流来说很重要的命令)依然是没有说明的，特别是用来重新定位的 *E*.
* Staging and Unstaging Items
  把你的文件放到git下面是你经常需要完成工作之一，Magit 有一系列的按键绑定和工具
  可以帮助你更好地完成工作。Magit 操作不仅可以暂存文件，还可以暂存在 *diff* 中选定
  的代码块。Magit"杀手级"特性之一就是它使用不用的等级来显示相关的信息。Magit 可以
  让你通过 *tab* 展开或者折叠已经暂存或者未暂存文件。如果你想更加细颗粒度地控制暂存或者
  未暂存文件，你可以使用 *M-1* 到 *M-4* 来操作所有的文件；此外，也可以使用 *1* 到 *4*
  操作选定的文件
  [[https://www.masteringemacs.org/static/uploads/diff-hunk-refined-level-4.png]]
  等级 1 隐藏所有的东西到一个分类里面(即 已暂存的文件);等级 2在一个分类里面只是显示文件名 (
  这是默认的行为);等级3会显示git代码块的头部；等级4 会显示所有做出修改的代码块。我使用最多
  的是等级2和等级4,如果你在使用按键 *TAB*,Magit会完成你想要的操作的。你拥有一系列可以让你的
  生活变得更加美好的按键绑定，例如： *n* 和 *p* 可以在你前一个单元和后一个单元(通常以代码块为单元)
  之间移动；*M-n* 和 *M-p* 可以在相邻单元之间移动，例如在等级4中的每个文件间移动。你也可以使用
  *+* 或者 *-* 放大或者缩小每段代码，使用 *0* 可以恢复默认设置。此外你也可以按下 *H* 给代码块
  添加额外的代码高亮。最后，你按下回车 *RET* 可以跳转到你修改的文件，代码块或者文件都适用该操作。
  -----
  你可以通过按下 *s* 或者 *u* 来暂存或者撤销暂存文件(或者代码块),此外，奉送一个很有用的小提示：
  如果你选定某部分的代码，然后按下暂存(撤销暂存)按键，Magit 会自动暂存(撤销)你选定的那部分代码。
  当你发现 /diff/ 选定的代码块不符合你的要求的时候，你会发现这种细颗粒度的操作真的非常运用
  -----
  有时候你对某些修改并不在意，你也不关心这部分修改是否已经提交；你可以像上面的暂存(撤销暂存)操作
  一样，通过按下按键 *K* 来忽略选定的代码块和文件，并且从你的电脑删除未提交到暂存区(untracked)的文件；
  这个命令可以比暂存(撤销暂存)命令完成更多的操作，例如，删除已保存的文件或目录(stash)
