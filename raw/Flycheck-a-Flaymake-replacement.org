#+TITLE: Flycheck-a-Flaymake-replacement
#+URL: https://www.masteringemacs.org/article/spotlight-flycheck-a-flymake-replacement
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-09-25 日 13:49]
#+OPTIONS: ^:{}

今天的主角是Flycheck,一个很好的Flymake替代品.

如果你用Emacs有一段时间了,那你也许听说过Flymake,它是一个Emacs内建的package,可以为你提供实时语法检查和高亮错误的功能.
它内置于Emacs有超过10年的历史了,虽然它依然很有用,但也开始变得有些过时了.
幸好,我们还有一个替代品,那就是[[http://www.lunaryorn.com/][Sebastian Wiesner]]写的flycheck.
本文就告诉你如何从Flymake过渡到Flycheck.

Flycheck的原理和Flymake是一样的,都是调用外部工具(可能是一个linter,编辑器或解释器),再将当前编辑的buffer内容拷贝为一个文件传递给这个外部程序,然后解析返回的错误与警告并在buffer的相应位置高亮出来.

那么为什么我们要弃用Flymake呢? 其中一个原因是它默认支持的语言太少了,也就是说,你需要为大多数的编程语言来自己编写Flymake上的处理器.
对于大多数人来说,尤其是那些对elisp不熟悉的人来说,这太困难了.

Flycheck则默认支持大多数的编程语言和开发环境,比如它就支持C和C++,是否带Clang都支持.
对大多数Emacs用户来说,下载,安装,启用都很方便. 你只需要在buffer中执行 =M-x flycheck-mode= 就行了,也可以执行 =M-x global-flycheck-mode= 来为所有buffer开启flycheck功能.
使用Flycheck还有一个好处就是其拥有大量的第三方插件 – 如果你发现flycheck默认不支持你所需要的语言,可以从其他package仓库中查看是否有相应的插件.

就我的经验来说,切换到Flycheck非常的容易. 完全可以做到无缝切换.

另一个重大的优势在与速度方面. Flycheck高效的多，你甚至还可以控制语法检查的时机(用 =M-x customize-group flycheck= 来定制.)

Flycheck also has its own keybinding, C-c ! by default, with a handful of utility commands you may find
useful:

| Key       | Binding                              |
|-----------+--------------------------------------|
| C-c ! ?   | Describe a Flycheck Checker          |
| C-c ! C-c | Compile using checker                |
| C-c ! C-w | Copy error point is on to kill ring  |
| C-c ! C   | Clear all highlights from buffer     |
| C-c ! V   | Report Flycheck version              |
| C-c ! c   | Start syntax checking current buffer |
| C-c ! e   | Change Flycheck executable           |
| C-c ! i   | Open Flycheck info manual            |
| C-c ! l   | List all Flycheck errors             |
| C-c ! n   | Jump to next error                   |
| C-c ! p   | Jump to previous error               |
| C-c ! s   | Change Flycheck checker              |
| C-c ! v   | Verifies the Flycheck checker works  |
| C-c ! x   | Disable Flycheck checker in buffer   |

Of particular note is C-c ! v as a diagnostic tool. When you run the command Flycheck will display diagnostic
information about the active checker in your current buffer. Useful if you have $PATH issues or are missing
the checker entirely on your system.

The command C-c ! C-c is also handy. Instead of checking the buffer source code you can also instruct Flycheck
to compile the file; whether that works or not depends entirely on your programming language and the checker
used.

Another major benefit is the ease of which you can add your own checkers. Using an elisp macro called
flycheck-define-checker you can construct a checker with just a few arguments and Flycheck will handle the
rest. I particularly like the use of LISP macros’ pattern matching and rx instead of the far more unreadable
and brittle string-based regular expressions Flymake used.

Take a look at the XML linter. It’s very easy to understand and modify:

#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker xml-xmllint
                           "A XML syntax checker and validator using the xmllint utility.

  The xmllint is part of libxml2, see URL
  `http://www.xmlsoft.org/'."
                           :command ("xmllint" "--noout" source)
                           :error-patterns
                           ((error line-start (file-name) ":" line ": " (message) line-end))
                           :modes (xml-mode nxml-mode))
#+END_SRC

All in all, Flycheck is a solid improvement over the original Flymake, and if you are not using it already I
encourage you to download it right now.
