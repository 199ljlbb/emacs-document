#+TITLE: Pattern-Matching-With-pcase
#+URL: http://newartisans.com/2016/01/pattern-matching-with-pcase/                                          
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-08-02 二 09:24]
#+OPTIONS: ^:{}

这是一篇关于如何使用pcase宏的指南.

* 精确匹配

任何数据都准从某种模式. 最精确的模式就是描述要匹配的数据它自己. 让我们看下面这个例子:

#+BEGIN_SRC emacs-lisp
  '(1 2 (4 . 5) "Hello")
#+END_SRC

上面这个例子明确指明了这是一个由4元素组成的list, 其中前两个元素分别是数字1和2; 第三个元素是一个cons cell,它的car是4,cdr是5; 第四个元素则是字符串"Hello". 
这是一个很明确的模式,我们可以直接用它来作相等测试(equality test):

#+BEGIN_SRC emacs-lisp
  (equal value '(1 2 (4 . 5) "Hello"))
#+END_SRC

* 模式匹配

模式只有通用一点的才有用. 假设我们想作一个类似的相等性测试,但是我们不关心最后一个字符串的内容是什么,只要它是字符串就行. 虽然这是一个很简单的模式声明,但是要用相等性测试来实现确很困难.

#+BEGIN_SRC emacs-lisp
  (and (equal (subseq value 0 3) '(1 2 (4 .5)))
       (stringp (nth 3 value)))
#+END_SRC

我们希望能有一种更直观的方法来描述我们想要匹配的那些值. 就好像我们用自然语言那么描述一样的:前三个元素要一模一样,最后一个元素可以是任意字符串. 借助`pcase`我们也能这样表示:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 (4 . 5) ,(pred stringp))
     (message "It matched!")))
#+END_SRC

可以把pcase看成是某种cond语句,只不过匹配条件不是测试是否为非nil,而是将值与一系列的模式进行匹配. 跟cond一样,若有多个模式都能匹配,则只触发第一个匹配模式的语句.

* 捕获匹配的值

pcase还能更进一步: 我们不仅仅可以进行模式匹配,还能从模式中捕获匹配的值供后续使用.

让我们继续上一个案例,假设我们想输出匹配出来的字符串内容:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 (4 . 5) ,(and (pred stringp) foo))
     (message "It matched, and the string was %s" foo)))
#+END_SRC

当出现像上例中foo那样的裸符号(没有被引用的符号)时,匹配的值会被绑定到与该符号同名的局部变量中. 这种模式我们称之为logic pattern(逻辑模式).

* Logical and literal patterns

要掌握pcase,有两类模式你必须要知道: Logical patterns, 以及 literal 或者说 quoted patterns(字面模式或引用模式). Logical patterns 说明我们想匹配某一类数据,并会对匹配的这些数据进行某些操作. 而quoted patterns的重点在于它的"字面意义",表示匹配的时候要与它的字面说明一模一样.

Literal patterns是目前为止最容易理解的了. 要匹配任何atom,string或list的值,对应的literal pattern就是值本身. 也就是说literal pattern "foo" 匹配字符串 "foo", 1 匹配 1, 诸如此类.

pcase默认匹配logical patterns,如果你想匹配literal pattern,则需要将之引用起来,除非该模式完全是由自引用的atom组成的:

#+BEGIN_SRC emacs-lisp
  (pcase value
    ('sym (message "Matched the symbol `sym'"))
    ((1 2) (message "Matched the list (1 2)")))
#+END_SRC

Literal patterns也可以用反引号来引用,这种情况下可以用逗号在其中插入一个logical patterns,就跟宏中的引用和反引用一样的. 例如:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,(or 3 4))
     (message "Matched either the list (1 2 3) or (1 2 4)")))
#+END_SRC

* More on logical patterns

logical patterns也分很多种. 让我们逐一了解下.

** 下划线 _

下划线匹配任意元素,而不管这个元素的类型和值是时候那么. 例如,要匹配一个list,而不关心它的头元素是什么可以怎么作:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(,_ 1 2)
     (message "Matched a list of anything followed by (2 3)")))
#+END_SRC

** Symbol

当执行匹配动作时,logical pattern中的符号会匹配该位置的任意元素,并且并且会将该元素作为同名局部变量的绑定值. 为了让你更容易理解一些,下面是一些例子:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,foo 3)
     (message "Matched 1, 2, something now bound to foo, and 3"))
    (foo
     (message "Match anything at all, and bind it to foo!"))
    (`(,the-car . ,the-cdr))
    (message "Match any cons cell, binding the car and cdr locally"))
#+END_SRC

这项功能有两个作用:你可以在模式后面的匹配中引用前面的匹配(这里两者比较的条件是eq). 还可以在后面的相关代码中使用匹配的值.

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,foo ,foo 3)
     (message "Matched (1 2 %s %s 3)" foo)))
#+END_SRC

** (or PAT ...) and (and PAT ...)

我们还可以使用or和and来对各个模式进行布尔逻辑运算:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,(or 3 4)
         ,(and (pred stringp)
               (pred (string> "aaa"))
               (pred (lambda (x) (> (length x) 10)))))
     (message "Matched 1, 2, 3 or 4, and a long string "
              "that is lexically greater than 'aaa'")))
#+END_SRC

** pred 判断式

可以用任意的判断式来对待匹配的元素进行过滤,只有通过判断式的元素才被认为是匹配上了. 正如上个例子中所显示的,可以用lambda函数来组成任意复杂的判断式.

** guard 表达式

在匹配的任何一个位置,你都可以插入一个guard表达式来保证某些条件是成立的. 它可以用来约束模式中的其他变量以保证某种模式的有效性,而且在guard表达式中还可以引用之前匹配时所绑定的局部变量. 参见下面的例子:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,foo ,(guard (and (not (numberp foo)) (/= foo 10)))
         (message "Matched 1, 2, anything, and then anything again, "
                  "but only if the first anything wasn't the number 10"))))
#+END_SRC

注意到在上面这个例子中,guard表达式是作为一个单独的匹配项存在的. 也就是说,虽然guard表达式本身并没有引用到它所匹配的元素上,但若guard表达式中的条件是成立的, 则该位置上的元素(即列表中的第四个元素)依然会被作为一个未命名的匹配项. 这是个相当不好的匹配形式,我们可以让这里的逻辑更明确一些:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,(and foo (guard (and (not (numberp foo)) (/= foo 10)))) _)
     (message "Matched 1, 2, anything, and then anything again, "
              "but only if the first anything wasn't the number 10"))))
#+END_SRC

这个例子的意思是一样,但是将guard表达式与其要测试的值联系在一起了,这样就更明确的表示我们不关心第四个元素是什么,只要存在就可以了.

** Pattern let bindings

Within a pattern we can match sub-patterns, using a special form of let that has a meaning specific to
`pcase’:

#+BEGIN_SRC emacs-lisp
  (pcase value
    (`(1 2 ,(and foo (let 3 foo)))
     (message "A weird way of matching (1 2 3)")))
#+END_SRC

This example is a bit contrived, but it allows us to build up complex guard patterns that might match against
values captured elsewhere in the surrounding code:

#+BEGIN_SRC emacs-lisp
  (pcase value1
    (`(1 2 ,foo)
     (pcase value2
       (`(1 2 ,(and (let (or 3 4) foo) bar))
        (message "A nested pcase depends on the results of the first")))))
#+END_SRC

Here the third value of value2 – which must be a list of exactly three elements, starting with 1 and 2 – is
being bound to the local variable bar, but only if foo was a 3 or 4. There are many other ways this logic
could be expressed, but this gives you a test of how flexibly you can introduce arbitrary pattern matching of
other values within any logical pattern.

** pcase-let and pcase-let*

That’s all there is to know about pcase! The other two utilities you might like to use are pcase-let and
pcase-let*, which do similar things to their logical pattern counter-part let, but as regular Lisp forms:

#+BEGIN_SRC emacs-lisp
  (pcase-let ((`(1 2 ,foo) value1)
              (`(3 4 ,bar) value2))
    (message "value1 is a list of (1 2 %s); value2 ends with %s"
             foo bar))
#+END_SRC

Note that pcase-let does not fail, and always executes the correspond forms unless there is a type error. That
is, value1 above is not required to fit the form of the match exactly. Rather, every binding that can paired
is bound to its corresponding element, but every binding that cannot is bound to nil:

#+BEGIN_SRC emacs-lisp
  (pcase-let ((`(1 2 ,foo) '(10)))
    (message "foo = %s" foo))   => prints "foo = nil"

  (pcase-let ((`(1 2 ,foo) 10))
    (message "foo = %s" foo))   => Lisp error, 10 is not a list

  (pcase-let ((`(1 2 ,foo) '(3 4 10)))
    (message "foo = %s" foo))   => prints "foo = 10"
#+END_SRC

Thus, pcase-let can be thought of as a more expressive form of destructuring-bind.

The pcase-let* variant, like let*, allows you to reference bound local symbols from prior matches.

#+BEGIN_SRC emacs-lisp
  (pcase-let* ((`(1 2 ,foo) '(1 2 3))
               (`(3 4 ,bar) (list 3 4 foo)))
    (message "foo = %s, bar = %s" foo bar))  => foo = 3, bar = 3
#+END_SRC

However, if you name a symbol with same name in a later logical pattern, it is not used as an eq test, but
rather shadows that symbol:

#+BEGIN_SRC emacs-lisp
  (pcase-let* ((`(1 2 ,foo) '(1 2 3))
               (`(3 4 ,foo) '(3 4 5)))
    (message "1 2 %s" foo))
#+END_SRC

This prints out "1 2 5", rather than the current match.
