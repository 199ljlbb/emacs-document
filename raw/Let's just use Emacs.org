在之前的帖子中, 我曾经说过,我会去试一试 =Celtx= 看看在所谓"novel mode"下写故事的体验有多好.

因为Emacs的关系,我想我可能要食言了.

连我自己都觉得难以置信.

用Emacs来写散文,感觉猪都能飞了.

我使用Emacs很久了,但是有一件事一直困扰着我,那就是Emacs的开发曾经经常处于停滞状态(Emacs has frequently been in a state of stagnation). 所有的Emacs粉丝都知道,Emacs是终极编辑器 – 再没有比Emacs更好的编辑器了. 这是一种宗教般的信仰,有点类似于Apple迷. 因此,很明显的,当你发现其他编辑器在什么地方比Emacs做的还好时,我的认知完全被颠覆了.

多年来, Emacs一直被批评在许多方面都做的很糟糕. 我映像最深的有以下几点:

+ 有关字体的说明奇怪又难懂. 设置字体简直是不可能.
+ No soft word wrap.
+ GNU Emacs中widget超级原始. XEmacs中的widget倒是比较整洁,可惜不是基于GTK+的.
+ 超级难看的字体显示.
+ 不支持UTF-8. 好在后来出现了第三方支持包.
+ 奇怪的配置系统.

当竞争者出现一项很酷的功能时,我们很自然的会去寻找替代品. 但是这些替代品毕竟不是Emacs. 当你使用它们是,你会觉得被受伤害.

但是… 看到问题被解决总是让人高兴的. 我最痛苦的一次经历是几年前,那时我还在用XEmacs. XEmacs更新速度超级慢, 但是GNU Emacs的更新速度居然比XEmacs更慢! 令我感到惊喜的时,GNU Emacs开发者们终于启动了22这个版本的开发工作. 我的天,我还以为我们会一直卡在21版本上呢.

更让人感到神奇的时,现在他们已经在在搞23版本了.

因此,现在GNU Emacs实际上更新已经很频繁了,并且每一次更新都会带来一些超级棒的功能.  UTF-8? 我们已经原生支持了. 超原始的widget集? 已经不再是了 – 我们在Linux上使用GTK+,在Mac上使用Aqua,能够完美适应两种桌面环境了. 字体很难看? 我们有GTK+, Pango 以及Freetype等等. 想设置字体? 直接在菜单中设置就行了. 若你希望在 =~/.emacs= 设置字体,只需要将类似 =(set-face-attribute 'default nil :font "Anonymous Pro 16")= 这么一段话写到 =~/.emacs= 中就行了. 瞧,你已经有了超棒的字体了.

那么Emacs23中出现的最大,最棒的改变是什么呢?

=visual-line-mode=.

用那些没有接触过Emacs的人的话来说就是“soft word wrap”.

Soft word wrap能够极大的简化你在编辑那些对断行敏感的内容时的心眼负担. 至于那些对断行不敏感的内容,你也无需再用 =M-q= 打乱原格式了. 这一下,编辑wikitext不再那么痛苦了. soft word wrap在写小说时尤其有用;简直是不可或缺的一项功能. 本文就是在开启了 =visual-line-mode= 的情况下完成的,虽然说断不断行其实对Mardown并不要紧.

当然,也不能仅仅因为Emacs支持soft word wrap了,就决定用Emacs来写小说.

我之所以决定用Emacs来写小说是因为Emacs后来添加了许多的新功能. 其中有两个功能尤为引人注目; 这两个功能完全打乱了我外出购买的Scrivener计划.

其中一个超棒的功能就是org-mode. org-mode的解决方案乍一看很不直观,但是当你了解了它的解决方案之后,你会会有“我之前怎么没想到这样”这样一种感觉.

我之前返回编辑文本文件的理由其实很简单: 当你写小说时,你往往需要同时编辑多个文件…并且这些文件还需要集中到一个"项目文件"中. 没有哪一款编辑器能够做到这一点. 我很喜欢TextRoom与Bean这两个文件,但是Scrivener提供的这个功能实在让人眼馋. 当然,Celtx也能解决这个问题. You could have a specific files for random work-in-progress scenes, and files for scrapped scenes, and things like that. And, of course, separate files for notes. Heck, a categorised database for background information.

org-mode开发者却提出了这么一个问题:“既然可以把这些内容整合到一个文件中去很容易,为什么要将之拆分到多个文件呢? 这不神经病吗?”

你知道的,一段小说可以看成是大纲文件中聚合在一起的几段文字. 当有人问你:"你可以编辑并且重排这些独立的场景吗?", 答案其实很简单: 这不过是个大纲而已,当然可以拉.

# 下面这段话好难翻译...求高人指点
org-mode的开发者们还提到了其他一些更棒的功能:“你知道Scrivener有一项功能是可以为你的工作设置状态么? 我们也能这样. 而且你甚至还能自定义这些状态. 你知道有一种功能可以让你为一段小说添加任意标签吗? 我们也有这项功能了. Shit’s fully taggable and searchable. 至于corkboard(大概是列大纲一类的东西)嘛,谁TMD还要corkboard啊, we have folding and fuzzy-search hyperlinks – whenever, wherever. 想要給文本添加注释? 以#开始的行被认为是注释行 - 你懂得怎么做了吧. 我猜你肯定会问是否能給文本添加格式然后导出成HTML,是的,这些我们也能做到.”

# 下面这段话好难翻译...求高人指点
org-mode的开发者们还提到了其他一些更棒的功能:“你知道Scrivener有一项功能是可以为你的工作设置状态么? 我们也能这样. 而且你甚至还能自定义这些状态. 你知道有一种功能可以让你为一段小说添加任意标签吗? 我们也有这项功能了. Shit’s fully taggable and searchable. 至于corkboard(大概是列大纲一类的东西)嘛,谁TMD还要corkboard啊, we have folding and fuzzy-search hyperlinks – whenever, wherever. 想要給文本添加注释? 以#开始的行被认为是注释行 - 你懂得怎么做了吧. 我猜你肯定会问是否能給文本添加格式然后导出成HTML,是的,这些我们也能做到.”
基本上, org-mode bends the definition of outliners until you realise that outlines are text and text is outline and now you’re a babbling lunatic who no longer makes sense. But it does make sense. 我能部分理解该软件的天才设计. I feel like I was listening to Ted Nelson’s rants again. 在org-mode中,我不是在编辑一个文档. I’m editing a piece of fiction, one piece at a time. On a computer. In a way that makes sense.

借助org-mode,我可以将笔记记载"Notes" section下. 我还有一个名为"Stroy"的section. 再往下,section被细分为chapter及scenes. 简直太棒了. After a while, I get “Rejected stuff” and “Stuff that might work better in some other story”.

第二个重大创新在于 =darkroom-mode=. This mode turns Emacs into a full-screen text editor. Seasoned Emacs users will probably do M-x facepalm at this point and say “you need a special mode for that?” before realising that some people here are stuck using GUIs, and these GUIs need some encouragement to return to the primordial and primitive state.

The sad truth behind full-screen “distractionless” writing programs is that they’re basically very feature-limited text editors. There wasn’t really any problem with this idea as such, but the fact is that the granddaddy of these programs is a proprietary commercial product that sells for $25. Yes, people pay money for feature-limited text editors. In open source land, we call these things “some programmer guy’s first shot at glory, before they realise everyone and their dog has written a limited-feature text editor and starts telling everyone to just use Emacs.”

I’m not condemning these people for trying to sell these products, I just find it ridiculous that they can make money. It’s like dot-com bubble all over again. I’d call the idea of “distractionless” writing programs ridiculous and overhyped, except for the fact that the concept certainly works well enough. I loved bashing text out in last year’s NaNoWriMo and not really looking other directions. I want the same stuff in Emacs.

Now, there are open source projects that implement the same ideas – I’ve used TextRoom and Bean quite successfully. But sooner or later, you’ve got to ask: Why not go the whole hog? Why not use a real text editor? You can make Emacs do this stuff, can’t you? Aww, we have no soft word wrap! …ahem, we now have soft word wrap. Moving on…

And the ridiculous thing is, running Emacs in fullscreen should be easy, right? In Linux, we have virtual consoles. To hell with X11, just go for the good ol’ text mode. Actually, when I was using a dog-old Celeron laptop, I ran Emacs in Linux text console, because the laptop was too puny to ran X11 in the first place.

But temporarily ditching GUI takes time and effort, even if it’s just “flip to the virtual console and log in”. Besides, I’m also working on an OSX laptop; no virtual console here. And here’s where the darkroom-mode kicks in. In GUI, Emacs needs some additional boosting to make it a worthwhile fullscreen editor: alternate colour mode à la Bean, and some additional margin control. Fortunately, darkroom-mode does just this, and seems to work fine.

Add as the sugar in the bottom, I could get markdown-mode, and got blogging covered, too.

Truly, people are making Emacs do everyfriggingthing. And this is awesome. I can now bash text out in Emacs, and edit it in LibreOffice, while Emacs also doubles as my web dev and LaTeX editor, and file conversion assistant. Less programs, more results.

But still, it’s fun to return to Emacs as a fiction editor. When I was a kid, I wrote my first horrible fantasy novel(ette) with DOS Emacs, when Windows 3.1 Write wouldn’t cut it. I also wrote the first Avarthrel stories with Emacs, before abandoning it due to lack of soft word wrap and limited typography. I’ll be happy to see how this renewed relationship works out.

But wait! I hadn’t used VICE in years, but there’s now a full-on Aqua port of VICE for OS X. When I was a kid, I was sure (probably, can’t remember for certain) that I could never fill up the ginormous memory space of 30490 bytes, available in Mini Office II. And yes, MO2 word processor looks just like the vaunted Distractionless Writing Environments™: edit time clock, word counter, and free memory counter – what more do you need? Hit ⌘F and VICE looks and feels just like a real Commodore 64 – just with a better keyboard. Maybe, just maybe, I should prove the kiddy version of me wrong and write a story in MO2. Still, my nano2010 project turned out to be 308171 bytes – yep, I really, really had to check that there wasn’t an extra “1” in the end. I would barely fit that text on a single 5.25” floppy… split on two sides. But short stories? Maybe, maybe…

That, however, kind of reminded me of one of my famous author’s brushes with no-bullshit writing environments of yesteryear:

    “I am happy to greet the geniuses [Seymour Rubenstein and Rob Barnaby] who made me a born-again writer, having announced my retirement in 1978, I now have six books in the works and two [probables], all through WordStar.” —Arthur C. Clarke

(And I hear George R.R. Martin dug WordStar too. They’re all wrong! Wrong, I say! WordPerfect 5.1 FTW!)

Update: [[http://www.avarthrel.org/blog/2012/01/actual-org-mode-experiences][Follow-up article on further org-mode experiences!]]
