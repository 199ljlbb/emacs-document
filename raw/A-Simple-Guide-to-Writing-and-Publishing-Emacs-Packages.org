#+TITLE: A-Simple-Guide-to-Writing-and-Publishing-Emacs-Packages
#+URL: https://spin.atomicobject.com/2016/05/27/write-emacs-package/
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-08-12 五 16:57]
#+OPTIONS: ^:{}

我[[https://spin.atomicobject.com/2016/01/26/webstorm-nodejs-development/][最近写了篇帖子]] 是关于用[[https://www.gnu.org/software/emacs][Emacs]] 作为JavaScript开发环境的. 其中一个着重要解决的问题是如何在Emacs中方便的运行JavaScript测试. 我经常使用TDD的开发方式,因此需要经常跳出编辑器去运行测试案例,这让我觉得很麻烦.

我知道Emacs是完全可以做到这一点的,因为已经有了类似的运行测试的mode了,比如[[https://github.com/pezra/rspec-mode][RSpec-mode]]. 基于此,我决定去学习一下[[https://www.gnu.org/software/emacs/manual/html_node/elisp][Emacs Lisp]] 然后自己写一个[[https://mochajs.org/][Mocha]] 测试器. 
在这个过程中,我学到了许多关于开发Emacs package的知识,并且最终开发出了一个有用的工具. 我想我有必要分享一下我学到的东西了.

关于这部分的内容有很多,我们这主要关注三个方面知识: 将Emacs作为Lisp IDE,编写简答的package,以及发布该package給他人使用.

* Emacs as an Emacs Lisp IDE

毋庸置疑, Emacs本身就很适合作为Emacs Lisp代码的开发环境. 它可以很轻易的配置成像IDE那样包括自动补全,文档提示,整合调试以及REPL等功能.

** A few recommendations

虽说Emacs本身就内置了这些IDE的特性,但我还是强烈推荐安装一些第三方的package,比如 [[http://company-mode.github.io/][company-mode]] (提供自动补全功能) and [[http://www.flycheck.org/en/latest/][Flycheck]] (提供实时语法监测功能).

我也推荐开启内置的eldoc-mode, 它在你编写代码时为各种函数与symbol提供文档与签名的提示信息.

最后,你应该熟悉那些内置的Emacs Lisp调试与执行相关的函数. 要测试一段代码,你可以开启内置的 =Lisp-interaction-mode=, =*scratch*= buffer在默认情况下会开启该mode. 在该mode下,你可以粘贴一段Emacs Lisp代码然后按下 =C-x C-e= 来运行这段代码并看到运行的结果.

Emacs还内置了一个[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Edebug]] 工具, 它可以单步调试Emacs Lisp代码. 它有很多的功能,但是我最常用的是它的 =edebug-defun= 函数. 它会在函数开始的地方设置一个断点,并在运行到这个函数时触发该断点.

* Making a Custom Compilation Mode

Mocha是一个命令行工具, Emacs内置有很多函数来运行外部的命令行程序.

** Compilation buffer

在Emacs中最贴近测试运行器的东西应该就是 =compilation buffer= 了. 它会运行一个外部的命令行进程然后将输出结果显示在buffer中. 这就很适合于运行像编译程序或测试运行器这一类的程序了. 它甚至还有高亮错误与跳转到出错位置的能力.

只需要像下面这样运行 =M-x compile= 就好了:

[[http://g.recordit.co/wWAwkTuVH2.gif]]

这种用法比较适用于执行那些固定不变的静态编译命令(默认为make -k). 但是它不是那些适合于作为测试启动器,因为测试启动器有如下要求:

1. 它需要在一个固定的目录下运行一个测试脚本(M-x compile会使用当前文件所在的目录作为运行脚本的工作目录).
2. 测试时需要能传递一个动态配置项(例如要测试的文件)給测试脚本

** Custom compilation mode

最终的解决方案是自己创建一个可以接受参数并运行交互式函数的compilation mode. 这个实现起来其实蛮容易的. 只需要几行代码就行了:

#+BEGIN_SRC emacs-lisp
  (require 'compile)

  ...

  (defvar node-error-regexp-alist
    `((,node-error-regexp 1 2 3)))

  (defun mocha-compilation-filter ()
    "Filter function for compilation output."
    (ansi-color-apply-on-region compilation-filter-start (point-max)))

  (define-compilation-mode mocha-compilation-mode "Mocha"
    "Mocha compilation mode."
    (progn
      (set (make-local-variable 'compilation-error-regexp-alist) node-error-regexp-alist)
      (add-hook 'compilation-filter-hook 'mocha-compilation-filter nil t)
      ))
#+END_SRC

这些代码可能有些难懂(托Lisp的福!), 其实它做的事情很简单. 我们使用内置的 =define-compilation-mode= 宏来定义一个名为 =mocha-compilation-mode= 的compilation-mode, 并且做了以下两件事情:

1. 给它传递了一个正则表达式来将[[https://nodejs.org/en][Node.js]] 产生的错误输出映射成文件,行号和列号.
2. 增加了一个hook来正确解析ANSI escape code.

第一件事让我们可以快速跳转到测试失败的地方. 第二件事可以让输出好看一些.

* Running Test Commands

现在我们自定义出了一个能正确显示命令输出的compilation mode了, 下一步我们需要定义一个测试命令,并让它能够在我们自定义的compilation mode下被调用. 要做到这一步需要经过以下几步.

** Find project root

许多命令行工具都要求是在项目的根目录下运行的. 好在项目的根目录一般都会有一些特定的文件或目录存在(比如版本控制目录).
由于通过寻找特定文件/目录来确定项目根目录位置的需求太常见了,因此Emacs内建了一个名为 =locate-dominating-file= 的函数来递归地沿着目录树向上搜索特定的文件名称.
该函数的文档很好的说明了如何使用该函数:

#+BEGIN_QUOTE
    (locate-dominating-file FILE NAME)
    Look up the directory hierarchy from FILE for a directory containing NAME. Stop at the first parent
    directory containing a file NAME, and return the directory. Return nil if not found. Instead of a string,
    NAME can also be a predicate taking one argument (a directory) and returning a non-nil value if that
    directory is the one for which we’re looking.
#+END_QUOTE
   
** Customize configuration

测试与编译毕竟是不一样的,编译每次的编译命令都是一样的,然而测试时需要动态的生成测试命令. 好在Emacs内置的 ~Customize~ 为package提供了一套很棒的配置界面.
~Customize~ 预定义了很多宏,这些宏可以用来为package定义配置参数,并提供了一套图形界面来配置这些参数.

例如,下面定义了一些Mocha的配置项:

#+BEGIN_SRC emacs-lisp
  (defgroup mocha nil
    "Tools for running mocha tests."
    :group 'tools)

  (defcustom mocha-which-node "node"
    "The path to the node executable to run."
    :type 'string
    :group 'mocha)

  (defcustom mocha-command "mocha"
    "The path to the mocha command to run."
    :type 'string
    :group 'mocha)

  (defcustom mocha-environment-variables nil
    "Environment variables to run mocha with."
    :type 'string
    :group 'mocha)

  (defcustom mocha-options "--recursive --reporter dot"
    "Command line options to pass to mocha."
    :type 'string
    :group 'mocha)

  (defcustom mocha-debug-port "5858"
    "The port number to debug mocha tests at."
    :type 'string
    :group 'mocha)
#+END_SRC

这些配置项的配置界面如下所示:

[[https://spin.atomicobject.com/wp-content/uploads/20160514211809/Screen-Shot-2016-05-14-at-7.04.02-PM-1024x393.png][GUI interface for configuring our package]]

由于许多的配置项是用来配置项目信息而不是全局信息的,因此Emacs还支持通过一个名为 =.dir-locals.el= 的文件来为每个目录设置自己的配置信息.
=.dir-locals.el= 文件的内容大致如下所示:

#+BEGIN_SRC emacs-lisp
  ((nil . (
           (mocha-which-node . "/Users/ajs/.nvm/versions/node/v4.2.2/bin/node")
           (mocha-command . "node_modules/.bin/mocha")
           (mocha-environment-variables . "NODE_ENV=test")
           (mocha-options . "--recursive --reporter dot -t 5000")
           (mocha-project-test-directory . "test")
           )))
#+END_SRC

上面这段代码可能有点难懂. 这样设置的效果是,如果你的Emacs工作目录处于该 =.dir-locals.el= 文件的同级目录或子目录下时,Emacs会使用 =.dir-locals.el= 中配置的信息而不是全局的配置信息.

我们定义好了这些配置项后,很容易就能写出个函数来拼装这些配置信息成一个测试命令了!

#+BEGIN_SRC emacs-lisp
  (defun mocha-generate-command (debug &optional mocha-file test)
    "The test command to run.
  If DEBUG is true, then make this a debug command.
  If MOCHA-FILE is specified run just that file otherwise run
  MOCHA-PROJECT-TEST-DIRECTORY.
  IF TEST is specified run mocha with a grep for just that test."
    (let ((path (or mocha-file mocha-project-test-directory))
          (target (if test (concat "--grep \"" test "\" ") ""))
          (node-command (concat mocha-which-node (if debug (concat " --debug=" mocha-debug-port) "")))
          (options (concat mocha-options (if debug " -t 21600000"))))
      (concat mocha-environment-variables " "
              node-command " "
              mocha-command " "
              options " "
              target
              path)))
#+END_SRC

* Generating and Running Compile Command

现在我们可以配置测试命令并且还能找出项目的根目录了, 下一步就是在之前自定义的compilation mode中运行测试命令了.
下面我会向你展示实现该功能的最关键的那些代码,我将这些代码分成几个部分并逐一进行讲解.

#+BEGIN_SRC emacs-lisp
  (defun mocha-run (&optional mocha-file test)
    "Run mocha in a compilation buffer.
  If MOCHA-FILE is specified run just that file otherwise run
  MOCHA-PROJECT-TEST-DIRECTORY.
  IF TEST is specified run mocha with a grep for just that test."
    (save-some-buffers (not compilation-ask-about-save)
                       (when (boundp 'compilation-save-buffers-predicate)
                         compilation-save-buffers-predicate))

    (when (get-buffer "*mocha tests*")
      (kill-buffer "*mocha tests*"))
    (let ((test-command-to-run (mocha-generate-command nil mocha-file test)) (root-dir (mocha-find-project-root)))
      (with-current-buffer (get-buffer-create "*mocha tests*")
        (setq default-directory root-dir)
        (compilation-start test-command-to-run 'mocha-compilation-mode (lambda (m) (buffer-name))))))
#+END_SRC

哇塞! 这份代码看起来挺难懂的,让我们一点一点来分析.

** Check for unsaved buffers

该函数作的第一件事就是检查是否还有未保存的buffer存在,如果存在则提示用于先保存. 
这项工作看起来挺复杂的,不过对于这种常用的操作,Emacs只需要寥寥数行就能搞定.

#+BEGIN_SRC emacs-lisp
  (save-some-buffers (not compilation-ask-about-save)
                     (when (boundp 'compilation-save-buffers-predicate)
                       compilation-save-buffers-predicate))
#+END_SRC

** Clean up test buffer

下一步我们通过搜索运行测试的那个buffer,来看它是否还在运行上一个测试. 若还在运行上一个测试,则我们直接杀掉它另起一个新测试.

#+BEGIN_SRC emacs-lisp
  (when (get-buffer "*mocha tests*")
    (kill-buffer "*mocha tests*"))
#+END_SRC

** Bind values

之后,正戏开始了. 我们一开始先设置了两个值:一个时我们要调用的测试命令,另一个是项目的根目录地址. 这两个值都通过上面定义的代码计算出来的.

#+BEGIN_SRC emacs-lisp
  (let ((test-command-to-run (mocha-generate-command nil mocha-file test)) (root-dir (mocha-find-project-root)))
#+END_SRC

** Run test command

然后,我们真正运行测试命令. 分三步走:

1. 创建并切换到一个buffer中,该buffer就是我们测试的运行环境.
2. 更改工作目录到项目根路径.
3. 在自定义的compilation mode中运行测试命令.

这三步就对应着代码中的最后三行:

#+BEGIN_SRC emacs-lisp
  (with-current-buffer (get-buffer-create "*mocha tests*")
    (setq default-directory root-dir)
    (compilation-start test-command-to-run 'mocha-compilation-mode (lambda (m) (buffer-name))))))
#+END_SRC

** Expose interface to users

现在我们有了运行测试命令的代码了,我们还需要将之暴露給用户使用. Emacs使用interactive functions来实现这一点, interactive function可以被用户通过 "M-x 函数名"或热键的方式调用.

要让一个函数变得interactive, 你只需要将 =(interactive)= 这句话放在函数体的最开头就行了,像这样:

#+BEGIN_SRC emacs-lisp
  ;;;###autoload
  (defun mocha-test-file ()
    "Test the current file."
    (interactive)
    (mocha-run (buffer-file-name)))
#+END_SRC

习惯上我们常常会将 =;;;###autoload= 这个特殊的注释放在函数前面,这个注释会帮助其他引用你package的Emacs文件找到函数定义的位置,这样就可以直接使用该函数(例如你可以为它绑定一个热键)而不用先加载package了.

Once a function is defined as interactive, it will appear in the M-x interface and can be activated by a user.

[[https://raw.githubusercontent.com/scottaj/mocha.el/master/mocha.png][Interact]]

And there you have it. With only a couple of functions and big dose of Emacs magic, we have created a highly
configurable test runner that is integrated into our development environment.

* Distributing on MELPA

Having done all the work to create a custom package, don’t you just want to share it with the world?
Fortunately for you, Emacs has a built-in package manager that makes this pretty easy. The package manager is
backed by several different repositories, so making your package publicly available is just a matter of
getting it into one of these repositories.

The three main package repositories are [[http://elpa.gnu.org/][ELPA]], [[https://marmalade-repo.org/][Marmalade]], and [[http://melpa.org/][MELPA]]. ELPA is the offical GNU repository that
comes with Emacs, while Marmalade and MELPA are third-party repositories. There are a number of differences
between each of the repositories, the most significant being how they deal with licensing.

ELPA and Marmalade both require that all packages are GPL- or GPL-compliant licensed. Additionally, ELPA
requires you to complete an [[http://www.gnu.org/licenses/why-assign.en.html][FSF copyright assignment form]]. MELPA, on the other hand, has no licensing
requirements, although it does have a code review process that all newly added packages must go through to
ensure the code is of suitable quality.

Which package repositories you choose to put your code on is up to you, but I personally use MELPA and will
talk about the process of getting a package into that repository.

There are two basic steps to getting a project on to MELPA.

** Format the package file

First, you need to follow standard Emacs Lisp conventions for formatting a package file, which includes adding
a description header and several other sections to the file. The [[http://www.flycheck.org/en/latest/][Flycheck]] package for Emacs is invaluable
here, because it will mark all of the required sections that are missing as errors and guide you through
adding them. Doing this correctly is important because the Emacs package manager actually parses these
sections as metadata to use.

** Add your recipe

Once your code is properly formatted, all you need to do is fork the [[https://github.com/melpa/melpa][MELPA project on GitHub]] and add a recipe
for your project. MELPA has docs for configuring more complex projects, but for a simple one-file package, the
recipe is really easy.

The recipe for the Mocha runner looks like this:

#+BEGIN_SRC emacs-lisp
  (mocha
   :repo "scottaj/mocha.el"
   :fetcher github)
#+END_SRC

That’s it, just a path to the GitHub repository. Once the recipe is added, you can open a pull request against
MELPA. Someone will review your package and may suggest code changes. Once those are done, your pull request
will be merged and MELPA will start publishing your package in its regular builds. The best part is, since
MELPA pulls your code straight from your source repository, you don’t have to do anything to push updates to
MELPA. It will just automatically pull down the latest version of your code.

Well, that is my short guide to creating and publishing an Emacs package. You can find the Mocha.el package I
used as an example [[https://github.com/scottaj/mocha.el][here]] and my Emacs config [[https://github.com/scottaj/new-emacs-config][here]]. Drop me a comment if you have any questions!
