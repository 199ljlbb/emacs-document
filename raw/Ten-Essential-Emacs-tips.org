#+TITLE: Ten-Essential-Emacs-tips
#+URL: http://web.psung.name/emacstips/essential.html?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-07-25 一 17:35]
#+OPTIONS: ^:{}

下面是我经常使用的Emacs功能以及一些小技巧. 想看更多这类东西的话,请移步[[http://www.gnu.org/s/emacs/tour/][Guided Tour of Emacs]].

* 触手可及的文档
除非你能够很容易的查阅文档,否则很难去学(甚至很难想去学)Emacs. 关于阅读文档,有一些有用的命令,其中最有用的有以下几个命令:
C-h C-h (关于帮助的帮助,必不可少的!)
C-h k, C-h f 以及 C-h v (分别用于显示按键,函数和变量的说明;必不可少的)
C-h r (在Emacs内阅读Emacs manual).

我再没看到有其他什么程序有像Emacs那么完善的文档了. 而且通过这些文档命令来查询比你用Google查询要来的更快也更直接.

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html][More information about help]].

* Keyboard macros(录制键盘操作的宏)
我在写这篇文章的时候就用到了keyboard macros, and I'm only on #2. 
在大多数编辑器中,macro智能用于完成那些最简单,最单调的任务,因为在那些编辑器中光用键盘,你几乎作不了什么事. 
Emacs的与众不同之处在于它拥有大量的高层命令(high-level command),这些命令可以让你定位和修改字符,单词,行,句子,函数,段落,页面以及整个文件)

若你知道如何在Emacs中用键盘来完成某些任务,则你只需要多按下那么几个按键就能不断的重复这些动作--根本无需编程!
要录制macro, 先按下 =F3=, 然后进行你想要被录制的那些操作,再按下 =F4= 停止录制. 然后就可以通过不断的的按下 =F4= 来重复这些操作.
(相比之下,你可能需要学习一个全新的脚本语言才能自动化某些任务-比如Office中的Visual Basic-然后还要弄明白怎么用这门新语言来完成你要完成的任务,这真是一个巨大的阻力)

Emacs macros 有两个王牌特性:
1. 一旦你定义了一个宏,你可以让它不断的执行,直到Emacs发现异常情况. 比如,若你定义了一个macro来修改某一行并移动到下一行,则 =M=0 F4= 会让Emacs修改所有行直到光标移动到最后一行.
2. 计数器(Counter)允许在每次运行macro时都插入不同的数字. 当用于声称连续(或非连续)的编号列表时很有用.

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][More information about macros]].

* 矩形编辑
虽说XML最近变得很热门,但还是有很多人要处理按列排列的数据. 这种数据在常见的Unix系统中随处可见. 
Emacs的矩阵命令可以让你修改,拷贝和移动文本中的一个矩形块; 要指定一个矩形块,你只需要将mark放在矩形的一个角,然后将光标放在矩形的对角上就行了.
你也可以通过在一系列连续行的相同位置插入相同文本的方式来插入一个矩形.

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html][More information about rectangles]].

* The mark ring
你再也不同在buffer中到处找"刚才的那个位置"了. 每次你跳转了光标(e.g. 进行了文本搜索或者按下了 =M-<= 或 =M->=), Emacs使用mark标记下你的前一个位置. 这就好像你在看书时用手指插入某一页然后将书翻到另一页一样.
你按下 =C-x C-x= 就会跳转到那个mark处. 不仅如此,Emacs会保存多达16个mark,你使用 =C-u C-SPC= 跳转到更早些时候的mark处. 这就使得mark和mark ring成为一个很好用的导航工具了.
你完全可以不假思索的使用它: 当你想跳回上之前的位置时,不断按下 =C-u C-SPC= 直到你回到想要的位置为止.

(你也可以显式的用 =C-SPC= 设置mark, 但是我几乎不需要通过这种方式来设置导航的坐标,只是在标示region时才会这样做.)

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][More information about the mark ring]].

* Ediff
用Ediff来比较一个文件的两个版本很方便. 我经常使用的一个命令是 =M-x ediff-buffers=. Emacs会高亮buffer间不同的地方并弹出一个新窗口供你输入命令.
For example, n and p move among differing regions in the buffers. For each
region, you can copy the first (or second) buffer's version to the other buffer with a and b, respectively.
You can even edit either buffer while Ediff is active. Then you can switch back to the Ediff window and press
! to recompute the diff. Being able to view the differences between two files interactively— while editing
those files— can be really useful.

[[http://www.gnu.org/software/emacs/manual/html_node/ediff/index.html][More information about ediff]].

* Tramp
Ever start up another shell so you could run Emacs to edit a file? (e.g. a root shell, or a shell on
a remote host) Well, Tramp has greatly reduced the number of situations where this is necessary. It allows you
to edit "remote" files as if they were local to your machine, taking care of opening up shells, retrieving and
writing data for you, etc. You simply specify remote files using a special syntax in C-x C-f (and near
anywhere else Emacs asks you for a filename), e.g.: /ssh:phil@remotehost:records/pizza-toppings.txt. I say
"'remote'" in quotes above because Tramp is general enough that you can also use it to edit local files— as
another user— via su or sudo e.g.: /sudo::/etc/hosts.

[[http://www.gnu.org/software/emacs/manual/html_node/tramp/index.html][More information about Tramp]].

* Compilation-mode and friends
One common theme in Emacs is that it gives you a lot of the raw power of
tools you already know how to use— your compiler, grep, etc. — and then it augments them with super-powers.
For example, when you run make using M-x compile, Emacs displays the compiler output in a new window. Should
any compile errors appear, Emacs highlights them and notes their line numbers. Pressing C-x ` (M-x next-error)
will jump directly to the line in your source code which caused the first error; press C-x ` repeatedly to
jump to successive errors. (You can also click on the entries in the compilation output buffer.) You can go
forwards and backwards through the list of errors using M-g n and M-g p (next-error and previous-error
respectively).

This facility is general enough that you can use the same keys to jump to line numbers that appear in the
output of M-x grep or M-x occur. In short, there is really no reason for you to have to explicitly note
filenames and line numbers in program output, because Emacs can jump directly to them for you.

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html][More information about "compilation mode"]].

* VC
I use Git for all my personal projects, and occasionally CVS and SVN for projects that I interact with.
Emacs provides a package called VC which lets me perform many version control operations from within Emacs. It
provides a layer of uniformity: the commands are all the same regardless of what version control system I am
using for any particular project. This is great because it means that when bzr or hg or whatever comes into
vogue, I can get quite a bit of work done before I have to learn yet another VCS.

Typical workflow for me: open a file. Make and test some changes. C-x v = to show a diff. If I like it, C-x v
v to prepare a commit. Emacs pops up a new window in which to type a commit message. C-c C-c there to make the
commit.

VC includes many other useful features, like showing annotated versions of files, showing change logs for
particular files, and helping you review historical versions and diffs.

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html][More information about VC]].

* Emacs server and multi-TTY support
Multi-TTY support, available in Emacs 23+, makes opening new Emacs
frames painless and fast. You might use this when you open a file from the shell, or when you run an external
program that invokes $EDITOR. (However, so much functionality is available directly from within Emacs that it
makes many external programs superfluous.)

To use multi-TTY, run M-x server-start in a running instance of Emacs. The set your $EDITOR to emacsclient -t.
When a program invokes the editor, emacsclient contacts your existing instance of Emacs which opens up a new
frame on the TTY you were using. It looks as if you had just run emacs, except that you can access all the
state of your other instance: all your buffers, kill ring entries, etc. are there. And it starts up pretty
much instantly. When you are done, press C-x # to finish and close that frame.

I use emacsclient to invoke Emacs in all sorts of other places. For example, instead of reading man pages
using man, I read them in Emacs. Here's a snippet of my .bashrc:

#+BEGIN_SRC sh
  pps_man() {
      /usr/bin/emacsclient -t -e "(woman \"$1\")"
  }
  alias man=pps_man
#+END_SRC

* global-set-key
Everyone has a different set of commonly used commands. Whatever features of Emacs you use
the most, bind them to keys to save yourself time. For example, to bind C-c s to shell globally:

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cs" 'shell)
#+END_SRC

Users may bind C-c [any letter] for their own use, and all major and minor modes are supposed to respect that.

More information about [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][key bindings]] and [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][key binding conventions]].
