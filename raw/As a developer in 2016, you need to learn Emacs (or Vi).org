如何提升你写代码的效率并且强迫你仔细思考.

本文并不是关于Emacs与Vi论战的文章. 我主要是想解释为什么(深入)学习一个低层的文本编辑器是任何软件工程师最重要的事情. 我个人喜欢Emacs因为我觉得它常用的快捷键(common shortcuts)比较容易记忆. 随后你会发现,其实选择哪个编辑器无所谓,只需要去学取用就行了.

像Emacs这种编辑器看起来很古老,但是却很有效率. 它的快捷键的设定充分考虑到了你的手放在键盘上的位置,以及最常用的那个键,并据此做了优化. They let you do your work as quickly as you can think about it but still, 它们强制你去思考自己在做的事情. 它们不仅让你变更更有效率, 它们还让你理解你在做的事情而不仅仅是无脑的写写代码(writing code with crappy CRLF).

* 熟悉你的工作环境.

我发现软件/网页应用开发人员常常愿意花时间去熟悉他们所使用的编程语言与框架. 这当然很好. 这会让你随着时间的推移而越来越有效率. 但是, 有些情况下, 仅仅在开发环境开发新的功能还远远不够. 你越熟悉软件代码,你越能够设计,编码并为产品添加进更多的功能. 然而,大多数时候,事不如人所愿.总会有各种各样的管理或技术上的原因导致你无法为产品增加功能. 很明显,若你们公司的文化是只有那几个开发主管有权限为产品增加新的功能,你的开发过程将很受限(而你也许应该换份工作). 然而,大多数时候, 这并不是你无法为产品增加功能的原因. 大多数时候,只是因为你对生产环境不熟悉而造成不想在该生产环境下工作(或者其他人不想你工作..)

当然,熟悉工作环境不仅仅意味着熟悉MS Windows. 还意味着熟悉你的版本控制系统,熟悉你所使用的发布工具,掌握服务器配置(例如Apache或Nginx的配置),熟悉程序语言的配置,熟悉linux配置与Linux日志系统.

你应该知道的,所有这些工具的配置文件都是文本格式的,你常常需要直接登录到服务器上编辑他们. 在这种情况下, 你没有办法使用任何一款熟悉的带图形界面的文本编辑器. 这时只能使用Emacs或Vi了.

[[http://tuhdo.github.io/static/helm_projectile.gif]]

总之,若你像熟悉你的工作环境,你需要熟悉Emacs或Vi. 任何对你的Vagrant,Docker,Linux服务器以及工作环境中其他任何东西的的配置操作都需要打开一个文本文件然后编辑它. 大多数时候,甚至提交一个变更都会要求你使用非图形界面的文本编辑器来编辑提交信息.

若你想把事情做好,请学习使用Emacs或Vi.

* 提升你的能力以使自己变得很有影响力

作为一名软件工程师,影响力来源于你能否想出可扩展的解决方案,能否在很短的时间内找出解决问题的好方法,写出的代码是否具有可维护性,等等一系列的事情. 有一点可以确定,那就是找出聪明的解决方案依赖于你的大脑而不是你的键盘和鼠标. 这就是我的观点. 像Nano,Emacs,Vi这类非图形化文本编辑器开发于70年代. 当时轨迹球与鼠标尚未流行,因此当时所有的工作只能通过键盘来完成. 而这种无鼠标的哲学一直流传到了今天, Emacs 和 Vi 完全无需鼠标也能用,这就是它们的优势!

想一想. 你每天有多少次将手从键盘移动到鼠标或触控板? 的有上千次吧? 每次你将手从键盘移开到鼠标你都需要关注于光标所在的位置. 然后等操作完后,你还要把手放回键盘. 这些动作每个大约要花费半秒钟的时间吧. 那么让我们假设每次你使用完鼠标然后将手放回键盘要花一秒钟的时间. 这意味着你一天浪费了1000s(16分钟),一个月就是333分钟(5小时), 每年就是2天半.

作为一名程序员,这些时间你应该用来增强你的影响力而不是TMD用来寻找你屏幕上的光标的. 学习Emacs意味着要学习许多的快捷键,然后用这些快捷键去完成任何事情,例如搜索与替换,移动光标到函数的下一行,跳转到任意行,将光标移动到文件末尾,等操作. 学习Emacs会强迫你使用键盘而不是鼠标/触控板. 假以时日, 你会变得更有效率并且更加适应键盘操作. 很快你就不会再想使用鼠标了,你会强迫自己去学习所钟爱的图形化编辑器的常用快捷键了.

* Think twice.

你根本不在意一年省出那么两天半?还有其他好处呢.

使用新出的图形化文本编辑器和IDE很明智. 我个人也常常使用Atom 以及 PhpStorm. 它们提供了许多便利的功能例如可以很方便的在函数,类之间跳转,很方便的进行单元测试, 集成了版本控制系统, 预览markdown等. 而且虽然像Emacs和Vi这样的编辑器也能提供这些功能,但是你不得不花无数的时间来配置各式各样的插件. 然而使用鼠标去点击这些功能却并不明智. 在我看来最好的一个例子就是大多数图形化编辑器都会提供的树状文件视图.

Viewing your file system as a tree on the left side of your code can be an interesting feature as long as you don’t know what you’re looking for. But, most of the time, people use that tree to open any file of their project. And by any I mean, even when they know what they are looking for. So, each time those developers (most of my co-workers) need to see a piece of code located in an another file than the one currently open, they get their mouse, read the tree view, click on the folders, read the file names and click on the file they need. Does it look familiar to you? It mean that even if you used your brain to think about which file contains the piece of code you’d like to see, you still need to read all your tree and find this file although you already know what you’re looking for. This is non-sens for me.

Emacs and Vi don’t comes with tree view tools. Instead, you need to use shortcuts and commands to open a new file or buffer. Most of the time, those editors provide an auto-complete function on file name so that you just have to type a few characters and press tab. Anyway, having to type the beginning of the file you’d like to open requires you to think about it and stay focus on what you’re looking for instead of being distract by your mouse and your tree view panel. This is a good thing and, again, after a few days using project management tools such as Projectile, you won’t want to use your tree view panel. (Adding a shortcut to toggle the tree view in Atom was the first thing I do after install)

Once again, think about it. How many time it takes to find a file, navigating trough the tree? Maybe 5 second. Maybe 10. It often depends on if the file is near the one you’re currently editing. How many files do you open per day? 10? 20?. Lets say 15. At the end of the day, you passed 2 minutes looking for something you already knows how it’s called and where it is. At the end of the year it’s 10 hours.

Instead of loosing your time by looking for files you already know were they are, take a break and start learning Emacs.

* Try it, love it

I could write about opening large files such as dump or log that Sublime and Atome aren’t able to open without crashing. I could write about memory leaks caused by web-view editors. I could too, write about micro-optimization you can’t do with any of those modern editors but may let you incredibly improve your productivity (I often use a rest client plugin for Emacs, for example).

But, the best thing you could do is to try it and you will soon love it.

Emacs and Vi can be used on multiple platforms such as Windows, Mac OS and Linux.

+ Find your version on the Emacs website.
+ Watch some EmacsRocks videos to get started.
+ Add some plugins using the Melpa package manager.
+ Learn shortcuts to be more productive

And, feel free to clone my personal configuration for web programming on my Github account.
