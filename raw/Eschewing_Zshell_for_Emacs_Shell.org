#+TITLE: Eschewing_Zshell_for_Emacs_Shell
#+URL: http://www.howardism.org/Technical/Emacs/eshell-fun.html
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-08-30 二 14:21]
#+OPTIONS: ^:{}

我做到了. 我已经不再需要Zshell , Fish , Bash 等等这些东西了…至少大部分时候都不再需要了. 
它们都是很不错的工具,只不过我我的工作流是以编辑器来驱动的. 我启动Emacs,然后仅仅在需要管理文件之类的操作时才进入shell,而不是先进入shell四处游荡,然后再开始编辑文件.

大多数Emacs用户都会拆分Emacs window然后在Emacs中启动一个shell,并在需要时进入该shell window中进行操作,不需要时则切换到其他window.
不过我发现Emacs的eshll似乎更适合于我,我越用就越发的爱上它了.

不过eshell有一个问题就是缺少文档...而且还有点难以理解. 因此我才撰写了本文. 不过在我开始之前,我要给Mickey Petersen的新书《[[https://www.masteringemacs.org][Mastering Emacs]]》做个广告,它里面有一篇"[[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][mastering the eshell]]" 写得特别好(而且免费就能阅读).

* Why?

shell其实就是一个由命令驱动的REPL. 你输入命令然后查看结果,然后输入另一个命令…如此往复. 如果输出结果只有几行,你会让它直接输出,如果输出结果有几百行,你会通过管道将结果传递给less命令.

不过在eshell中,你根本无需将结果传递给另一个pager,如果你发现输出结果太多内容了,只需要按下 =C-c C-p= 就会帮你跳到最后输入命令的头部,and then C-v your way down. 甚至于,你可以直接搜索你想要的那部分内容.
在eshell中执行命令意味着,这些命令的输出都会经过Emacs pager的处理.

更酷的是,你可以像[[http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/][Plan 9]] 那样启用Eshell的智能显示功能, 这时,执行命令后,如果命令输出过长,你的光标会自动留在输入命令的位置,直到你输入了一个非光标移动的键,光标才会跳到输入下一条命令的地方.

Eshell拥有如下几个优点:

+ 它是由Emacs Lisp写成的, 因此它是跨平台的.
+ 你不仅仅可以使用脚本和程序,你还可以使用Emacs函数… 想用Lisp写你的shell脚本?没问题!
+ 它的使用体验也比一般的shell要好.

但是当一个程序想要直接操作终端时,就不适于Eshell了.^[[http://www.howardism.org/Technical/Emacs/eshell-fun.html#fn.1][1]]

你可能也尝试过Eshell, 我想你一定为它的独特性所吸引. 现在让我们更近一步的了解它…

* Starting the Shell

我的工作流是以Emacs所驱动的,偶尔才会用到shell. 我常常会在shell中输入一些命令后,然后回到原来的工作中. 当我想弹出一个shell时,我使用下列函数来创建一个指定buffer的window(该window位于原始window的下方,占三分之一的高度),并开启eshell(它会自动进入当前buffer的目录中).

#+BEGIN_SRC emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)
#+END_SRC

下面是我自定义的函数 =x=, 它会退出shell并关闭该window.

#+BEGIN_SRC emacs-lisp
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+END_SRC

* Lisp REPL? Almost

EShell 同时也是一个 Lisp REPL. 下面是一些例子:

#+BEGIN_EXAMPLE
  $ (message "hello world")
  "hello world"
#+END_EXAMPLE

不过,在shell中,相比语法的清晰度我们更在意输入的简洁性与速度, 因此,在这种情况下,我们可以省略掉两边的括号:

#+BEGIN_EXAMPLE
  $ message "hello world"
  "hello world"
#+END_EXAMPLE

以 =eshell/= 为前缀的函数在Eshell中执行时可以省略掉这个前缀, 也就是说你可以直接输入echo而实际调用的是 =eshell/echo= 函数:

#+BEGIN_EXAMPLE
  $ echo "hello world"
  "hello world"
#+END_EXAMPLE

不过如果你把函数调用放入括号内,则你需要输入函数的全称:

#+BEGIN_EXAMPLE
  $ (eshell/echo "hello world")
  "hello world"
#+END_EXAMPLE

那么传递的参数类型是什么呢? 在普通shell中,所有的参数都是字符串类型的,不过在Eshell中就不一定了:

#+BEGIN_EXAMPLE
  $ echo hello world
  ("hello" "world")
#+END_EXAMPLE

结果是一个由两个字符串组成的list. 然而,你并不能把echo的结果传递给car… 至少不能直接传递过去:

#+BEGIN_EXAMPLE
  $ car echo hello world
#+END_EXAMPLE

会返回一个错误, 下面这样也会报错:

#+BEGIN_EXAMPLE
  $ car (list hello world)
#+END_EXAMPLE

你会发现,一点你把代码纳入括号内,你就必须严格遵守elisp的相关语法规定了,所以你应该这么做:

#+BEGIN_EXAMPLE
  $ car (list "hello" "world")
#+END_EXAMPLE

EShell定义了一个名为 =listify= 的命令(译者注:这里严格来说是eshell/listify函数,但在eshell中不严格区分命令还是函数,所以按照shell的说法说成是命令了,下面在不区分函数或命令时也一样),能将传递给它的参数转换为字符串列表:

#+BEGIN_EXAMPLE
  $ listify hello world
  ("hello" "world")
#+END_EXAMPLE

不过如果你想把这个命令的结果传递给别的命令,比如car,你需要将之用大括号括起来,它的意思是说,以shell的方式执行命令,但是将返回的结果作为lisp对象来对待:

#+BEGIN_EXAMPLE
  $ car { listify hello world }
  hello
#+END_EXAMPLE

目前我还没搞清楚 =list= 和 =listify= 之间的区别, 它们看起来作用是一样的:

#+BEGIN_EXAMPLE
  $ listify hello world
  ("hello" "world")

  $ list hello world
  ("hello" "world")

  $ listify 1 2 3
  (1 2 3)

  $ list 1 2 3
  (1 2 3)

  $ list "hello world"
  (#("hello world" 0 11
     (escaped t)))

  $ listify "hello world"
  (#("hello world" 0 11
     (escaped t)))
#+END_EXAMPLE

说了这么多,其实我的意思就是说,你既可以把Eshell当成是一个shell,也可以把它当成是一个Lisp REPL,你也可以既把它当成是shell也把它当成是Lisp REPL,只要你不要被搞糊涂了就成.

* Variables

在Eshell的文档中有这么一段话

#+BEGIN_QUOTE
    由于Eshell是基于Emacs的REPL(1), 它并没有自己的作用域, 因此它存储变量的方式跟你在Elisp程序中是一样的.
#+END_QUOTE
   
运行 =printenv= 会显示出那些环境变量,使用 =setenv= 来设置环境变量:

#+BEGIN_EXAMPLE
  $ setenv A "hello world"
  $ getenv A
  "hello world"
#+END_EXAMPLE

使用 =setq= 来未普通的Emacs变量来赋值:

#+BEGIN_EXAMPLE
  $ setq B hello world
  $ echo $B
  hello
  $ setq B "hello world"
  $ echo $B
  hello world
#+END_EXAMPLE

通过在变量名前加 =$=, 你可以查看所有Emacs变量的值:

#+BEGIN_EXAMPLE
  $ echo $recentf-max-menu-items
  25
#+END_EXAMPLE

需要注意的是,同名的环境变量的值会覆盖Emacs普通变量的值:

#+BEGIN_EXAMPLE
  $ setenv C hello
  $ setq C goodbye
  $ echo $C
  hello
#+END_EXAMPLE

左后,你可以从文件中读取Eshell变量的设置:

#+BEGIN_EXAMPLE
  $ cat blah.eshell
  setq FOO 42
  setq BLING "bongy"

  $ . blah.eshell
  42
  bongy

  $ echo $FOO
  42

  $ echo $BLING
  bongy
#+END_EXAMPLE

* Loops

在shell中经常需要逐个地处理多个文件. 在Eshell中,你既可以使用lisp中的dolist来实现,也可以使用类似shell的语法来实现:

#+BEGIN_EXAMPLE
  $ for file in *.org {
    echo "Upcasing: $file"
    mv $file $file(:U)
  }
#+END_EXAMPLE

上例中的 (:U)是一个转换器,会将它之前的内容转换为大写形式. 我会在下一部分内容对它中进行讲解(这也是Eshell最出色的特性之一).

你可能会发现,上例中的 =*.org= 传递给 =for= 循环语句的是一个用来迭代的list. 另外,如果有多于1个的参数传递给 =for= 时,也会创建一个list,例如:

#+BEGIN_EXAMPLE
  $ for i in 1 2 3 4 { echo $i }
#+END_EXAMPLE

若传递给 =for= 的是多个list,则这些list会合并(flatten)成一个list, 因此你可以像下面这样操作:

#+BEGIN_EXAMPLE
  $ for file in emacs* zsh* { ... }
#+END_EXAMPLE

* File Selection

若你要做的仅仅是重命名一个文件,或修改某个目录下所有文件的访问权限,那你根本无需用到shell,用dired甚至是Finder就足够了. shell只有在你想操作一部分匹配某模式的文件时才能比较方便.
Eshell由于其特有的的filter(偷师于[[http://zsh.sourceforge.net/Doc/Release/Expansion.html][Zshell的modifiers]])功能而尤为表现出众:

#+BEGIN_EXAMPLE
  $ ls -al *.mp3(U)   # Show songs I own
#+END_EXAMPLE

上例中的 =*.mp3= 这部分就是我们所熟知的globbing pattern,而后面的(U)部分则进一步对结果进行了过滤. 在本例中,仅仅会输出宿主为你自己的那些文件.

你可以用下面两个命令来获取相关帮助信息:

#+BEGIN_EXAMPLE
  $ eshell-display-predicate-help
  $ eshell-display-modifier-help
#+END_EXAMPLE

你可能之前有接触过predicates(因为它们跟ZShell中的意义很接近), 不过更酷的是,你可以通过编写Elisp代码来新增自己的predicates 和 modifiers.

** File Filter Predicates

下面是filter predicates的一份列表. 可以叠加多个filter predicate,也就是说输入 =ls **/*(IW)= 会列出当前目录及其子目录中那些同组用户及其他用户可读的文件.

| / | Directories (may accept d … gotta verify that)          |
| . | Regular files                                            |
| * | Executable files                                         |
| @ | Symlinks                                                 |
| p | named pipes                                              |
| s | sockets                                                  |
| U | Owned by current UID                                     |
| u | Owned by the given user account or UID, e.g. (u'howard') |
| g | Owned by the given group account or GID, e.g. (g100)     |
| r | Readable by owner (A is readable by group)               |
| R | Readable by World                                        |
| w | Writable by owner (I is writable by group)               |
| W | Writable by World                                        |
| x | Executable by owner (E is executable by group)           |
| X | Executable by world                                      |
| s | setuid (for user)                                        |
| S | setgid (for group)                                       |
| t | Sticky bit                                               |
| % | Other file types.                                        |

"filter predicates" 的用法很直观. 比如要列出所有的目录只需要:

#+BEGIN_EXAMPLE
  ls -ld *(/)
#+END_EXAMPLE

有些"filter predicates"可以接受其他选项参数,例如要列出所有属于howard的文件,可以这样做:

#+BEGIN_EXAMPLE
  ls -ld *(u'howard')
#+END_EXAMPLE

=%= 需要第二个参数来指定文件的类型. 这里文件类型的说明与 =ls= 命令的输出一致,例如 =%c= 表示字符设备. 下面是一份来自 =ls= man page的列表:

| b | Block special file     |
| c | Character special file |
| d | Directory              |
| l | Symbolic link          |
| s | Socket link            |
| p | FIFO                   |

可以整合多个"filter predicates". 比如要列出所有你拥有的符号链接,可以这样:

#+BEGIN_EXAMPLE
  ls -l *(@U)
#+END_EXAMPLE

你也可以列出不属于你的所有符号链接,方法是加一个前缀^:

#+BEGIN_EXAMPLE
  ls -l *(@^U)
#+END_EXAMPLE

Gets more interesting with time and size filters which take parameters. This is the cheat-sheet-like output
from eshell-display-predicate-help:

#+BEGIN_QUOTE
a[Mwhms][+-](N|'FILE')
    access time +/-/= N months/weeks/hours/mins/secs (days if unspecified) if FILE specified, use as
    comparison basis; so a+’file.c’ shows files accessed before file.c was last accessed.
m[Mwhms][+-](N|'FILE')
    modification time…
c[Mwhms][+-](N|'FILE')
    change time…
L[kmp][+-]N
    file size +/-/= N Kb/Mb/blocks
#+END_QUOTE

The following examples should clarify how to use these:

To display all org-mode files in my directory that I’ve modified since yesterday, I would type:

#+BEGIN_EXAMPLE
  ls *.org(m-1)
#+END_EXAMPLE

Where the m is the modification time, the - means less than and 1 refers to the day, since we didn’t specify
any other time period. To display the files we’ve modified over the last 8 hours, we’d enter:

#+BEGIN_EXAMPLE
  ls *.org(mh-8)
#+END_EXAMPLE

Compress everything which hasn’t been accessed in 30 days:

#+BEGIN_EXAMPLE
  bzip2 -9v **/*(a+30)
#+END_EXAMPLE

The ** symbol is recursive access to sub-directories.

Shell scripts (that end with a .sh and are executable (we specify the * character first) that are 50k or
larger (we use the + symbol):

#+BEGIN_EXAMPLE
  ls ***/*.sh(*Kl+50)
#+END_EXAMPLE

To specify 50K, we first write k then + (to mean or larger) and finally the size. The three stars, *** is a
recursive search into sub-directories, but not to follow symbolic links.

** Modifiers

Modifiers are similar to filters mentioned above, except that begin with a colon symbol, and they change the
string, file or list that precedes it. For instance, :U upper-cases a string or file name:

#+BEGIN_EXAMPLE
  for f in *(:U) { echo $f }
#+END_EXAMPLE

Returns:

#+BEGIN_EXAMPLE
  AB-TESTING-EXPERIMENTS.ORG
  AB-TESTING-PRESENTATION.ORG
  ACTIONSCRIPT-NOTES.ORG
  ADIUM-PLUGINS-AND-EXTENSIONS.ORG
  ALFRED.ORG
  ANGULARJS-BOILERPLATE.ORG
  ANGULARJS-MODULES.ORG
  ANGULARJS-TESTING.ORG
  APPLESCRIPT-RECIPES.ORG
  APPLESCRIPT-SKYPE.ORG
  ...
#+END_EXAMPLE

The modifiers can also affect a variable. The following example behaves the same as the previous example:

#+BEGIN_EXAMPLE
  for f in * { echo $f(:U) }
#+END_EXAMPLE

Here is the complete list of modifiers for an individual string or file name:

#+BEGIN_EXAMPLE
  :L      lowercase                                
  :U      uppercase                                
  :C      capitalize                               
  :h      dirname                                  
  :t      basename                                 
  :e      file extension                           
  :r      strip file extension                     
  :q      escape special characters                
  :S      split string at any whitespace character 
  :S/PAT/ split string at each occurrence of /PAT/ 
  :E      evaluate again                           
#+END_EXAMPLE

Here is the list of modifiers for a list:

#+BEGIN_EXAMPLE
  :o            sort alphabetically                           
  :O            reverse sort alphabetically                   
  :u            unique list (typically used after :o or :O)   
  :R            reverse the list                              
  :j            join list members, separated by a space       
  :j/PAT/       join list members, separated by PAT           
  :i/PAT/       exclude all members not matching PAT          
  :x/PAT/       exclude all members matching PAT              
  :s/pat/match/ substitute PAT with MATCH                     
  :g/pat/match/ substitute PAT with MATCH for all occurrences 
#+END_EXAMPLE

To append the string, -foobar, to all files owned by you, before the extension, you would type:

#+BEGIN_EXAMPLE
  for F in *(U) { mv $F $F(:r)-foobar.$F(:e) }
#+END_EXAMPLE

** Custom Filter Predicates

As you know, the best part of Emacs is its ability to customize everything…including your shell experience.

As [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell#adding-new-modifiers-and-predicates][Mickey Petersen mentions]], we can create our own predicates to filter out files. Wouldn’t it be nice if we
could specify files based on their internal org-mode #+TAGS entry. For instance, at the top of my files, I add
the following headers:

#+BEGIN_SRC org
  ,#+TITLE:  Alfred
  ,#+AUTHOR: Howard Abrams
  ,#+DATE:   [2013-05-15 Wed]
  ,#+TAGS:   mac technical
#+END_SRC

I would like Eshell to be able to list files that end in org, but with contents that include the mac tag,
like:

#+BEGIN_EXAMPLE
  ls *.org(T'mac')
#+END_EXAMPLE

If the filter used a single symbol, we would append a tuple to eshell-predicate-alist that specifies the
symbol and the predicate function (that returns true or nil). Something like

#+BEGIN_SRC emacs-lisp
  (add-to-list 'eshell-predicate-alist '(?P . eshell-primary-file))
#+END_SRC

However, in our example, the T symbol takes the tag as a parameter. In this case, we need a two-step process:

 1. A function to parse the Eshell buffer to look for the parameter (and move the point past the parameter)
 2. A predicate function that takes a file as a parameter

For the first step, we have our function called as it helps parse the text at this time. Based on what it
sees, it returns the predicate function used to filter the files:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'eshell-predicate-alist '(?T . (eshell-org-file-tags)))
#+END_SRC

I combine the two steps into a single function, as after the function is done with Step 1, we will return a
lambda expression for Step 2.

The first step is to parse the text following the point looking for the tag (surround in single quotes), and
move the point forward over the option for our filter function (notice the goto-char to the end of the match).

#+BEGIN_SRC emacs-lisp
  (defun eshell-org-file-tags ()
    "Helps the eshell parse the text the point is currently on,
  looking for parameters surrounded in single quotes. Returns a
  function that takes a FILE and returns nil if the file given to
  it doesn't contain the org-mode #+TAGS: entry specified."

    ;; Step 1. Parse the eshell buffer for our tag between quotes
    ;;         Make sure to move point to the end of the match:
    (if (looking-at "'\\([^)']+\\)'")
        (let* ((tag (match-string 1))
               (reg (concat "^#\\+TAGS:.* " tag "\\b")))
          (goto-char (match-end 0))

          ;; Step 2. Return the predicate function:
          ;;         Careful when accessing the `reg' variable.
          `(lambda (file)
             (with-temp-buffer
               (insert-file-contents file)
               (re-search-forward ,reg nil t 1))))
      (error "The `T' predicate takes an org-mode tag value in single quotes.")))
#+END_SRC

The returned function loads the given file into a temp-buffer, and search the contents for the regular
expression. Returns nil if the match wasn’t found (false), and anything else is interpreted as true.

Now I can search for Homebrew commands without bringing up my beer notes:

#+BEGIN_EXAMPLE
  $ grep brew *.org(T'mac')
#+END_EXAMPLE

Since the grep is really the Emacs grep function, it brings the results up in a buffer that I can click to
load/edit.

* Summary

Of course the real beauty of EShell is the Emacs integration, for instance, using highlight-regexp to colorize
key words from expected output, or piping the results to an Emacs buffer:

#+BEGIN_EXAMPLE
  $ ls -al > #<buffer some-notes.org>
#+END_EXAMPLE

And then issue a C-c | on that results to create an org-mode table you can continue to manipulate.

While the Eshell is baked into Emacs, and requires no customization, I have [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][made a few improvements]] that may
be helpful to others.

Footnotes:

^[[http://www.howardism.org/Technical/Emacs/eshell-fun.html#fnr.1][1]]

Programs like top wouldn’t work well in Eshell since it these programs are still attempting to manipulate the
world with ancient VT100 control codes, and the Eshell mostly is expecting standard textual output.

However, if you type top, eshell notices top on its naughty list (actually, the list is called
eshell-visual-commands), and will farm it out to a special comint buffer.

In practice, I don’t notice this limitation, since most applications I would like, I usually just use a
similar program re-written in Emacs. However, if you find an app that doesn’t work well in EShell, append it
to this list.
