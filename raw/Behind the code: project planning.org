在"代码之外"系列文章中, 我会回顾那些使我开发更有效率的工具与流程. 我希望通过分享我的经验,可以从你们获得反馈,从而改进我工作的方式.

今天的主题是关于项目计划的. 其过程包括将项目分解为任务以及评估完成任务所需要的付出. 该过程的产物可以为客户提出意见,可以用于为老板估计成本甚至可以作为项目文档的起点.

* 文件格式以及工具很重要
若从这段艰苦的过程中我只学到一件事情的话,那一定是:我现在所使用的工具不代表以后也会用. 也许是因为出现了更好的工具,也许我不得不换一个操作系统,而在该操作系统上,这个工具不再能用.

我会尽量避免使用私有格式的二进制文件. 这是我的第一要则:

*规则 1: 经可能使用纯文本格式*.
无论你使用的哪个平台,你都可以阅读及修改文本文件. 若恰好你所用时的平台载有许多上好的命令行工具(例如UNIX系的操作系统), 这意味着你已经有用了一个强大的查找,搜索以及转换文本文件的系统.

文本文件rock, 那么用那个工具来编辑它们最好呢? 作为一名开发者,你对使用文本编辑器应该并不陌生. 事实上,这应该你最高效,最适应的工具才对. 若你只能精通一件事,那就是精通使用你的文本编辑器.

* 项目管理的工具

有许多制定项目计划的工具. 然而所有这些工具所提供的功能并不比一个纯文本文件能提供的功能更多(all while working with nothing more than plain text files). 我的选择是使用Emacs搭配它那令人惊叹的Org-Mode包.

你完全可以根据自己的意愿选择任意的工具. 毕竟流程要比工具更重要一些. 但是不要会错意,一个好的工具可以极大的改善你的工作流程.

我喜欢Org-Mode因为它提供了很多功能, 同时归根到底,所有的一切都是纯文本. 这样我可以很容易地使用版本控制系统来存放项目文件,同时使用像Ruby和grep这些工具来管理他们.

* Breaking a Project Into Features and Tasks

The first step for planning a project is breaking it into smaller pieces. I like to create a shallow hierarchy, where I break a project into features, and then take those features and break them down into tasks.

Features are usually the bigger chunks that your client or boss would know by name. Since features are big chucks, you can’t estimate them correctly, or think clearly about their dependencies without breaking them down further.

By breaking a feature down into tasks, you virtually walk though the implementation of that feature, thinking about dependencies and potential problems that you’ll have along the way.

While breaking a project into features and tasks, don’t think about time estimates, only process. Work through the steps you would actually perform to implement a feature in your mind, recording them in your project plan as tasks.

Below is screenshot from Emacs, showing the outline I’ve created for a fictional social networking application. Org-Mode allows me to fold the outline at any level. Here I’m viewing just the outline headings that show two features, broken down into tasks.
[[http://www.devalot.com/assets/articles/2008/07/project-planning/folded.jpg]]
Folded

While I’m creating the feature and task breakdown, I leave myself little notes just in case the headings are too vague and a few weeks later I’m not sure what the hell I was talking about.

Below is a fully expanded version of the outline from above, so you can see the notes. Later, these notes can be expanded and used as project documentation or a client proposal.

In Org-Mode, the tab key is used to expand or fold an outline. This makes it very easy to see just the part of the project plan that you’re interested in.
[[http://www.devalot.com/assets/articles/2008/07/project-planning/expanded.jpg]]
Expanded

* Estimating the Tasks

As I mentioned before, a feature by itself is too vague to estimate. But now that you’ve broken each of the features down into tasks, you should have enough information to estimate the effort of actually implementing those features.

I’m not going to dive too deeply into the art of estimating in this article. That said, put your estimating cap on and let’s get to it.

The best way to estimate your tasks is to begin with the first task, and work through them one at a time. I prefer to break my tasks down into hours and minutes, usually in 30-minute increments.

If you come across a task that will take more than a workday to complete, you need to break the task down into more tasks. It’s important that your tasks are granular enough, I personally don’t like my tasks to take more than 5-hours. Along the same lines, any task that takes less than 30-minutes, however, should be reviewed to ensure it has been thought through enough.

Below is a screenshot showing estimates assigned to each task. I like to switch Org-Mode into column view. Org-Mode makes it easy to see summations of task estimates using its handy column view mode, which turns your hierarchical outline into a table.

In this screenshot, I’ve assigned estimates to each task. The features now show the total estimates for their respective tasks, leaving the top headline (the project name) with a total estimate for the project. Org-Mode automatically summed the time estimates for me, I only assigned estimates to the tasks themselves (in purple below).
[[http://www.devalot.com/assets/articles/2008/07/project-planning/columns.jpg]]
Columns

* Presenting the Project Plan

With your task estimates completed, you’ve collected enough information to present a proposal to a client, or a project plan to your boss.

If you’ve been using a software tool to create your project plan, it probably has an export feature. Org-Mode can export your document to HTML, LaTeX, and even a cleaned up ASCII text file.

Even if you’re not using a tool with an export feature, you’re a software developer right? Write a script that will transform your text file to something useful for your situation.

As an example of a client proposal, I’ve exported the project file into a cleaner PDF file for my fictional client. If this were a real proposal, I would add additional notes, along with details about the cost of the implementation.

* Using the Project Plan During Implementation

Why do all the work of creating a proposal, only to let it collect dust? When it comes time to implement the features that you created a spec for, why not turn them into a to-do list?

Using the Org-Mode ability to manage to-do lists, I turned the estimated tasks into to-do items. With Org-Mode I can “clock in” to a task, which starts a timer. When a task is complete, I mark it as being done, and then I can compare the time I spent working to my estimates.

Below is a screenshot where I’ve completely expanded a finished task so that you can see the meta-data that Org-Mode was adding to it when I used the timer on a task and then marked it as complete. You can also see how a headline can be turned into a to-do item.
[[http://www.devalot.com/assets/articles/2008/07/project-planning/tasks.jpg]]
Tasks

It’s much more useful to switch back into column view for the comparisons between my estimates and the clocked time. The below screenshot shows my outline back in column view, this time also showing clock time summaries.

This is a good example of how Org-Mode can collect the meta-data in your text file and then present it to you in a more efficient way. You can even edit the data in this table-like view, and Org-Mode will do the right thing.
[[http://www.devalot.com/assets/articles/2008/07/project-planning/clocked.jpg]]
Clocked

In addition to column view, Org-Mode has several ways to generate reports from your data. I especially like the agenda view.

With the agenda view, you can see which tasks you’ve scheduled for specific days. I find it very useful to spend a little bit of time at the end of my day, and schedule which tasks I’ll be working on for the following day.

In the morning, I can review my agenda and start working with a clear idea of what I should be doing. This really helps with any tendency to stall or procrastinate during the first hours of the day.

* Article Artifacts and Further Reading

I chose to show screenshots above so you could get a feel for how a good tool like Org-Mode can provide a nice interface for project planning. The nice thing about Org-Mode is that you’re just working with a text file, and if you open that file in any other text editor, it doesn’t look foreign.

Below are links to files I created while writing this article. Open the project plan in your favorite text editor and compare it to the screenshots above. Try opening it in Emacs and see what happens.

+ [[http://www.devalot.com/assets/articles/2008/07/project-planning/project-planning.org][The Plain Text Org-Mode File (Project File)]]
+ [[http://www.devalot.com/assets/articles/2008/07/project-planning/project-planning.pdf][A PDF Client Proposal]]

If you’re looking for more information about Org-Mode, the main web site is a great resource. There is a fantastic manual, and a very responsive mailing list if you have any questions.

+ [[http://orgmode.org/][Org-Mode Web Site]]
+ [[http://www.youtube.com/watch?v=oJTwQvgfgMM][Org-Mode GoogleTalk]]

