#+TITLE: Having-emacs-type-for-you
#+URL: http://howardism.org/Technical/Emacs/templates-tutorial.html
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-09-25 日 13:29]
#+OPTIONS: ^:{}

我们经常要打字. 而对于文本文件来说,很多的输出只是为了组织内容而已. 比如org-mode中的星号,空格以及 =#+=, 比如编程代码中的那些括号, =do..end= 之类的.

不过也没谁规定这些内容必须是由你手工输入的呀.

下面介绍几种让Emacs为你自动输入的几种方法… 比如我们可以在新建某类文件时自动插入一份样板文.

注意,在本教材中,我不会将关于自动补全的内容,所以不会讲到 =auto-complete= 或 =company=.

* Introduction to YAS

[[https://github.com/capitaomorte/yasnippet][yasnippet]] 可以让你快速插入代码片段. 所谓片段是指一份模板,你可以手工或用程序来替换模板中的某些内容. 
至于会选择哪个模板来扩展则要看buffer的mode了.

刚开始的时候, 让我们先配置一下YAS让它插入一段固定的文本吧. 
我这里假设你安装了[[https://github.com/jwiegley/use-package][use-package]], 让我们先安装yasnippet然后为我们的模板设置一个独立的目录(接下来我这里会混用片段和模板这两种说法):

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+END_SRC

然后我们可以按下 =C-c C-n= 来创建一个模板了,如果记不住快捷键的话也没关系,输入 =M-x yas-new-snippet= 也行(而且如果你开启了类似IDO的插件,这个速度也不慢).

你应该会进入一个新的template buffer中了, 而且由于它还使用了YAS,你可以输入一个域的内容后,按下 =Tab= 键来跳转到下一个域的位置.
假设你输入的内容是这样的:

#+BEGIN_SRC snippet
  # -*- mode: snippet -*-
  # name: blah
  # key: blah
  # --
  Bling blargh-a bloo bloop!
#+END_SRC

按下 =C-c C-c= 来应用该模板. Emacs会询问你这个模板需要在哪个mode下使用. 基本上你只需要直接按下回车就行了.

如果你想保存下来这个模板,推荐你保存到 =~/.emacs.d/snippets= 目录下,这也是默认的保存地址.

现在,在相同mode的buffer中输入 =blah= 然后按下 =Tab=, =blah= 会被扩展为: =Bling blargh-a bloo bloop!=

YAS还提供了多种触发模板的方法,不过下一步让我们修改模板让它变得更有用一些吧.

* Interactive Snippets

将一个简短的内容扩充为一长段内容当然很有用,若能让模板扩展的结果能适应上下文环境那就更好了.
首先我们让模板的某些内容变得容易修改起来.

在某个编程语言的mode下打开一份代码文件,然后新建一个模板. 比如我要为JavaScript创建一份ifelse的代码片段:

#+BEGIN_SRC snippet
  # -*- mode: snippet -*-
  # name: ifelse
  # key: ife
  # --
  if ($1) {
    $0;
  }
  else {
  }
#+END_SRC

现在我在JavaScript mode下输入 =ife= 按下 =Tab= 就能扩展出一个 =if.. else= 模板了, 而且你会看到光标定位到了括号中间($1指定了光标位置), 我们可以直接输入条件了. 
按下 =Tab= 后会跳转到大括号之间,这样我iu可以直接输入符合条件的执行语句了(因为$0标示了域编辑结束的地方)

关于YAS,我还没讲完了,不过让我们先讲点其他的,这样我的下一个YAS例子才显得有意义.

* New Files

还记得公司突然要求在每个文件头部加上版权声明的那个时候吗? 我是不太清楚这样做有多大的法律效力啦,不过Emacs很早以前就自带了 [[https://www.emacswiki.org/emacs/AutoInsertMode][Auto Insert]] 功能了.
它可以为某种特定mode的新文件设置一个样板文件.

下面配置使用 =use-package= 来为你的新文件配置样板文件:

#+BEGIN_SRC emacs-lisp
  (use-package autoinsert
    :init
    ;; Don't want to be prompted before insertion:
    (setq auto-insert-query nil)

    (setq auto-insert-directory (locate-user-emacs-file "templates"))
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode 1)

    :config
    (define-auto-insert "\\.html?$" "default-html.html"))
#+END_SRC

这样配置后,创建一个以 =.html= 为后缀的文件会插入 =~/.emacs.d/templates/default-html.html= 的内容. 
这个功能很不错,不过对于资深用户还不太够用.

* Combining YAS and Auto Insert

我们可以用一个模板作为新文件的默认内容, 这样我们还可以对插入的样板作一些修改.

YAS实际上使用 =yas-expand-snippet= 来完成扩展动作的, 这个函数接受一个参数,那就是要插入模板的内容. 你可以将下面代码放入 =*scratch*= buffer中,然后执行这条语句试试(用C-x C-e)来执行:

#+BEGIN_SRC emacs-lisp
(yas-expand-snippet ";; Bah-da $1 Bing")  
#+END_SRC

你大概能够猜到我下一步要干嘛了对吧? 让我们来创建一个辅组函数,这个辅组函数将auto-insert自动插入新文件的内容作为模板来进行扩展.

#+BEGIN_SRC emacs-lisp
  (defun autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))
#+END_SRC

上面 =(buffer-string)= 会返回buffer的整个内容, 而yas-expand-snippet接受的额外两个参数指明了用结果替代当前buffer的哪些内容. 在上例中的 =(point-min)= 和 =(point-max)= 表示替换整个buffer的内容.

=define-auto-insert= 函数能够接受一个数组为参数,数组中的元素若为字符串,则表示引入相应文件的内容,若元素为一个函数名称,则表示执行该函数:.

#+BEGIN_SRC emacs-lisp
  (define-auto-insert "\\.el$" [ "defaults-elisp.el" autoinsert-yas-expand ])
#+END_SRC

上面的设置表示,当新建一个以 =.el= 为后缀的文件时,先插入 =defaults-elisp.el= 文件中的内容,然后执行函数 =autoinsert-yas-expand=,这个函数会扩展该模板并替代原模板的内容.

你甚至还可以在模板中添加 =$1= , =$2= 这样的域占位符.

我是用use-package来封装这些模板的,像这样:

#+BEGIN_SRC emacs-lisp
  (use-package autoinsert
    :config
    (define-auto-insert "\\.el$" ["default-lisp.el" ha/autoinsert-yas-expand])
    (define-auto-insert "\\.sh$" ["default-sh.sh" ha/autoinsert-yas-expand])
    (define-auto-insert "/bin/"  ["default-sh.sh" ha/autoinsert-yas-expand])
    (define-auto-insert "\\.html?$" ["default-html.html" ha/autoinsert-yas-expand]))
#+END_SRC

* Programmatic Snippets

手工输入域的内容当然可以,不过若是能用程序自动输入某些信息不是更好吗?

比如, 一般来说,我们的Emacs Lisp文件头部都是这样的:

#+BEGIN_SRC emacs-lisp
  ;;; demo-it --- Utility functions for creating demonstrations
  ;;
  ;; Copyright (C) 2014  Howard Abrams
  ;;
  ;; Author: Howard Abrams [[mailto:howard.abrams%2540gmail.com][<howard.abrams@gmail.com>]]
  ;; Keywords: demonstration presentation
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; ...
#+END_SRC

这里第一行包含了文件的名称及其描述. YAS会将反引号中的代码作为Emacs Lisp来执行,因此执行:

#+BEGIN_SRC emacs-lisp
(yas-expand-snippet "`(buffer-file-name)`")  
#+END_SRC

会插入buffer所示文件名的完整路径, 而执行:

#+BEGIN_SRC emacs-lisp
(yas-expand-snippet "`user-full-name`")  
#+END_SRC

会插入变量 =user-file-name= 的值. 

我们的Emacs Lisp模板可以设置成这样:

#+BEGIN_SRC emacs-lisp
  ;;; `(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))` --- $1
  ;;
  ;; Author: `user-full-name` <`user-mail-address`>
  ;; Copyright © `(format-time-string "%Y")`, `user-full-name`, all rights reserved.
  ;; Created: `(format-time-string "%e %B %Y")`
  ;;
  ;;; Commentary:
  ;;
  ;;  $2
  ;;
  ;;; Code:

  $0

  ;;; `(file-name-nondirectory (buffer-file-name))` ends here
#+END_SRC

* Full Programmatic Inserts

For me, a journal is a file in the ~/journal directory that has the simple file format of YYYYMMDD. We might
be tempted to create a YAS snippet to automatically include a title, like:

#+BEGIN_SRC org
  ,#+TITLE: Journal Entry for `(format-time-string "%e %B %Y")`
#+END_SRC

But that only works if I am really good and write in my journal each day. Perhaps I could create a snazzy
title with the date based on the file name. Let’s define that format:

#+BEGIN_SRC emacs-lisp
  (setq org-journal-date-format "#+TITLE: Journal Entry- %e %B %Y")
#+END_SRC

And a function that will parse a buffer-file-name to the appropriate values for that format^[[http://howardism.org/Technical/Emacs/templates-tutorial.html#fn.1][1]]:

#+BEGIN_SRC emacs-lisp
  (defun journal-title ()
    "The journal heading based on the file's name."
    (interactive)
    (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
           (month (string-to-number (substring (buffer-name) 4 6)))
           (day   (string-to-number (substring (buffer-name) 6 8)))
           (datim (encode-time 0 0 0 day month year)))
      (format-time-string org-journal-date-format datim)))
#+END_SRC

Now, our template would be:

#+BEGIN_SRC org
  ,#+TITLE: Journal Entry for `(journal-title)`
#+END_SRC

Nice, but let’s level up on this…

While I’m quite intrigued with [[http://www.habitica.com/][Habitica]], and am looking forward to better [[https://github.com/abrochard/emacs-habitica][Emacs integration]], what I really
like, is the idea of Dailies… tasks checked-off each day come back the next day.

I already have some good [[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org#auto-note-capturing][task capturing]] code, but nothing that keeps coming back. Perhaps, I could have my
daily journal entry track that.

This idea of inserted daily information and check-lists should only happen if I am creating today’s journal
(not catching up with the past), and I might have special dailies inserted based on the day of the week.

I could use YAS snippets, but then the amount of `(...)` code may over-shadow the text, so I’ll create a small
collection of templates:

+ journal-dailies.org to contain the real dailies
+ journal-dailies-end.org to contain any follow-up notes
+ journal-mon.org for additional text to be inserted on Monday journals
+ journal-tue.org for additional text to be inserted on Monday journals
+ And a journal-XYZ.org for each additional weekday

With these files, editing my daily lists should be clear and straight-forward.

Now, I just need to update my snippet-based template. Since I will need to create a fair amount of Emacs Lisp
functions to support that, I might as well make the entire thing programmatic:

#+BEGIN_SRC emacs-lisp
  (define-auto-insert "/[0-9]\\{8\\}$" [journal-file-insert])
#+END_SRC

Now when I load up a file with a name that contains only 8 digits, it will run the function
journal-file-insert:

#+BEGIN_SRC emacs-lisp
  (defun journal-file-insert ()
    "Insert's the journal heading based on the file's name."
    (interactive)
    (insert (journal-title))
    (insert "\n\n") ; Start with a blank separating the title

    ;; If the journal entry I'm creating matches today's date:
    (when (equal (file-name-base (buffer-file-name))
                 (format-time-string "%Y%m%d"))

      ;; Note: The `insert-file-contents' leaves the cursor at the
      ;; beginning, so the easiest approach is to insert these files
      ;; in reverse order:
      (insert-file-contents "journal-dailies-end.org")
      (insert "\n")

      ;; Insert dailies that only happen once a week:
      (let ((weekday-template (downcase
                               (format-time-string "journal-%a.org"))))

        (when (file-exists-p weekday-template)
          (insert-file-contents weekday-template)))

      (insert-file-contents "journal-dailies.org")
      (previous-line 2)))
#+END_SRC

That’s all I know about [[https://www.emacswiki.org/emacs/AutoInsertMode][Auto Insert]] and the [[https://github.com/capitaomorte/yasnippet][yasnippet project]]. Do you have any questions or tips I could use?

* Footnotes:

^[[http://howardism.org/Technical/Emacs/templates-tutorial.html#fnr.1][1]]

I generally don’t like using functions like substring for manipulating strings since such functions generally
lack precision. Since my jounal-title function will not be called without a (buffer-name) that matches an 8
digit pattern, I felt like I could get away.

However, a version that uses regular expressions could be:

#+BEGIN_SRC emacs-lisp
  (defun journal-title ()
    "The journal heading based on the file's name."
    (interactive)
    (when (string-match "\\([[:digit:]]\\{4\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)" (buffer-name))
      (let* ((year  (string-to-number (match-string 1 (buffer-name))))
             (month (string-to-number (match-string 2 (buffer-name))))
             (day   (string-to-number (match-string 3 (buffer-name))))
             (datim (encode-time 0 0 0 day month year)))

        (format-time-string org-journal-date-format datim))))
#+END_SRC

Hopefully, that regular expression isn’t too scary. Emacs’s version of regular expressions look a tad worse
due to all the escaping. Might be better if I used concat and broke into three parts:

#+BEGIN_SRC emacs-lisp
  (concat "\\([[:digit:]]\\{4\\}\\)"   ; year
          "\\([[:digit:]]\\{2\\}\\)"   ; month
          "\\([[:digit:]]\\{2\\}\\)")  ; day
#+END_SRC

  * \\( \\) creates a group that match-string let’s me extract a part
  * [:digit:] refers to any number, and putting it in another pair of brackets is… well, just a Emacsism.
  * \\{ \\} specifies a repeating value, so \\{4\\} says, look for the previous pattern 4 times… in other
    words, 4 numbers.

However, as Jason Milkins [[https://twitter.com/emacs_gifs/status/776566508503781376][pointed out]], using rx would make that function much more readable:

#+BEGIN_SRC emacs-lisp
  (require 'rx)

  (defun journal-title ()
    "The journal heading based on the file's name."
    (interactive)
    (when (string-match (rx (group (= 4 digit))
                            (group (= 2 digit))
                            (group (= 2 digit))) (buffer-name))
      (let* ((year  (string-to-number (match-string 1 (buffer-name))))
             (month (string-to-number (match-string 2 (buffer-name))))
             (day   (string-to-number (match-string 3 (buffer-name))))
             (datim (encode-time 0 0 0 day month year)))

        (format-time-string org-journal-date-format datim))))
#+END_SRC

As you can tell, a hairy regular expression, using string-to-number on a series of match-string seemed
overkill for a tutorial.
