#+TITLE: More-emacs-configuration-tweaks
#+URL: http://www.mostlymaths.net/2016/09/more-emacs-configuration-tweaks.html
#+AUTHOR: lujun9972
#+CATEGORY: raw
#+DATE: [2016-10-10 一 11:18]
#+OPTIONS: ^:{}


在 [[http://www.affectv.com/][Affectv]] 工作的时候,我们使用了各种不同的编辑器: Sublime, Atom, Emacs, Pycharm, IntelliJ... 事实上只有两个人是用的相同的编辑器! 
在这种条件下,我经常能在别人的编辑器上看到那些让我垂涎的功能. 于是就在昨天,我决定把这些功能添加进我的Spacemacs中.

* Click for multiple-cursors

我是在Jordi的Sublime上发现这项功能的, and it is much more comfortable than using more-like-this or similar helper
functions, even if I need to use the trackpad to do so. After all, a multi-cursor edit (proper edit, not as a
substitute for a macro) is rare enough that I can tolerate leaving the home row. Easy enough to configure
thanks to [[https://twitter.com/emacsrocks/status/304223468793237505][Magnar Sveen]].
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "M-<down-mouse-1>"))
  (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
#+END_SRC

[[https://1.bp.blogspot.com/-a69eC9niTvQ/V9Vz4Yo7FOI/AAAAAAAAEYc/pyqcsOMr-p4bd48uYVCintKKFc9vNF3fgCLcB/s1600/MC.gif]]

* Minimap

也是从Sublime上发现这个功能的, 我之前的emacs配置上也配置了这个功能. 实现起来很简单,只需要将 =minimap= 这个package加到additional packages的列表中,然后配置以下就好了.
参见下面的动画.

#+BEGIN_SRC emacs-lisp
  'dotspacemacs-additional-packages '(helm-dash key-chord pig-mode mmm-mode minimap origami ansible)
#+END_SRC

* Folding

我很喜欢Vim和Sublime那样的折叠方式. 用origami能够很好的模拟这一点. 我优化了一下折叠函数,让它在折叠时也能更新minimap(因为某些原因,minimap并不会在折叠时更新,我猜它是把刷新函数绑定到修改的的那些hook上了).
我为这些折叠操作分配了各种包括z和Z的快捷键(and A-z which maps to æ in Colemak).

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'origami
    '(progn
       (defun rb-show-only (buffer point)
         (interactive (list (current-buffer) (point)))
         (progn (origami-show-only-node buffer point)
                (minimap-new-minimap)))

       (defun rb-toggle-rec (buffer point)
         (interactive (list (current-buffer) (point)))
         (progn (origami-recursively-toggle-node buffer point)
                (minimap-new-minimap)))

       (define-key evil-normal-state-map "æ" 'rb-show-only)
       (define-key evil-normal-state-map "Z" 'origami-toggle-node)
       (define-key evil-visual-state-map "Z" 'origami-toggle-node)
       (define-key evil-insert-state-map "C-Z" 'origami-toggle-node)
       (define-key evil-normal-state-map "z" 'rb-toggle-rec)
       (define-key evil-visual-state-map "z" 'rb-toggle-rec)
       (define-key evil-insert-state-map "C-z" 'rb-toggle-rec)
       )))
#+END_SRC

不知道为什么为那些折叠函数添加advising并不起作用. 现在这种做法不是那么的完美但是也能用了. 
I left the Z bindings as they are, since I have not used them yet, and will probably delete them if I keep not using them.

[[https://1.bp.blogspot.com/-B472yAC46lM/V9V1ks3gD9I/AAAAAAAAEYk/YxmCx7l3R1UUuY2m8hh4AqiBR-EYrSwWgCLcB/s1600/F.gif]]

* Execution overlays in Ensime (Scala)

我是在一场emacs交流会上演示[[https://github.com/clojure-emacs/cider][Cider]] 时才看到这项功能的,不过我听[[https://twitter.com/fommil][@fommil]] (好像是他吧)提起过这项功能最初是来自于ensime的.
[[https://twitter.com/fommil/status/766736564705759232?ref_src=twsrc%255Etfw][事实上也确实是这样的]]. And it's easy enough to use C-c C-v C-r (thing of it as
extended command, eval, region to remember), given an open inferior Scala interpreter. Symbol prettify does
not apply to overlays, so you need to customise the arrow used therein.

[[https://3.bp.blogspot.com/-Cr11eWs8n4k/V9V3UKHk4iI/AAAAAAAAEYs/e6ipa0-TM685903ruUhexQBODr-PRJUeQCLcB/s1600/EN.gif]]
