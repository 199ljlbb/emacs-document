#+TITLE: why-i-switched-from-vim-to-emacs
#+URl: https://matthaffner.wordpress.com/2016/12/07/why-i-switched-from-vim-to-emacs/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2016-12-19 一 10:00]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


我最开始用GNU/Linux时,Vim和Emacs都是接触过的. 当时觉得Vim看起来很直观,而且它的按键也特别有效率; Emacs则看起来不容易学习,而且它的按键也有点反人类.
我通过 [[http://unix.stackexchange.com/questions/986/what-are-the-pros-and-cons-of-vim-and-emacs][在Stack Overflow的这篇帖子]] 比较了Vim和Emacs的优缺点. 其中有个用户说你永远都不会对你的Emacs配置感到满意,你会不断地调整你的配置,而且你还不能直接用别人的配置.
基于这些考虑,我选择了用Vim,而且成为了Vim的忠实信徒.

然而,随着时间的推移,我逐渐发现我的工作流效率并不高,而且我使用终端,编辑器,IDE的方式也不够高效.
于是我开始寻找解决之法,接着我发现Emacs能解决所有这些问题. 然而,由于我已经很熟悉Vim了,而且也没有那么多时间去修改配置文件,所以我一直在犹豫是否要使用Emacs.
最终,我对工作中的瓶颈已经忍无可忍了,刚好又[[https://www.youtube.com/watch?v=JWD1Fpdd4Pc&t][看到了这个视频]], 这个视频完全改变了我对Emacs的看法.
在视频中,演讲者提到Vim通过 [[http://spacemacs.org/][Spacemacs]] 可以近乎无缝地从Vim迁移到Emacs中来. 
于是我试了一下,然后就被迷住了.

下面我会告诉你基于Vim的工作流到底低效在哪里,以及为什么我会使用Emacs.
需要说明的是,我使用的是Spacemacs,它有很多普通Emacs不具备的功能. 而且我在下面的阐述也是基于Spacemacs来说的. 
但是理论上,我所说的这些东西是与发行版无关的,任何人都能将之应用到自己的Emacs配置中,只是需要花点时间自己配置而已.

* Reasons why I switched

** I didn’t have to stop using Vim

是的,严格来说我也不算是切换到Emacs了. 我在Emacs中应用的依然是Vim的那一套按键设置.
有多种途径都能让你在Emacs中使用Vim的那一套按键 (Evil mode, Spacemacs, 也许还有其他的?), 而且在我看来,只有疯子才会长期使用Emacs的原生按键设置呢.
‘Emacs pinky’可不是开玩笑的(不过貌似确实很多人都不把它当成一回事)
在我考虑是否要切换到Emacs那会儿,我的关节疼得很厉害(不是Vim的锅),所以对我来说,一款编辑器是否符合人体工程学是很重要的考量因素.
Spacemacs不仅保留了Vim的那一套高效按键设置,还添加了颇多强大的功能.

** Copying/yanking and paste from one window into another

在Spacemacs中使用Vim按键真实太爽了.
你不仅可以用Vim按键写代码,你可以在Emacs的任何地方都使用Vim按键,包括编辑shell. 真是难以想象的舒爽.
举个例子,假设你输出一条shell命令时,本来想输的是

#+BEGIN_SRC shell
  rm /home/user/folder1/folder2/folder3/folder4/folder5/some-file.txt
#+END_SRC

结果错误地输成了

#+BEGIN_SRC shell
  rn /home/user/folder1/folder1/folder3/folder4/folder5/some-file.txt
#+END_SRC

这里有两个错误, =rm= 写成了 =rn=, =folder2= 写成了 =folder1=. 
若你是在普通的终端模拟器上操作,则需要先按 =上箭头= 取回输错的命令,然后用 =左箭头= 或 =Ctrl-Home= 将光标移到行首,修改 =rn= 为 =rm=, 再按 =右箭头= 到第二个 =folder1= 处进行修改.

而在Emacs下就没那么复杂了,你只需要取回上一条错误的命令,然后按下 =0= 跳到行首,将 =rn= 改为 =rm=, 在用 =/= 搜索到第二个数字 =1= 处(也可以按 =f1f1= 跳转过去),用 =r= 命令将它修改正确.

用Vim的方式操作终端,用Emacs就是这么任性.

我之前用Vim时,使用 'Terminator' 作为我的终端模拟器, 我常常需要开4,5个窗口来打开各式各样的shell和文件.
当我需要把一条命令在终端与文件之间相互拷贝时,需要先用鼠标选中要拷贝的文本,然后按下 =Ctrl-Shift-c= 将文本拷贝到粘贴板,在切到新窗口,按下 =Ctrl-Shift-v= 将文本从粘贴板粘贴回来.
而用spacemacs,一切都变得非常简单. 你只需要定位到shell所在的window,然后按下 =yy= 赋值你想要的行,然后切回代码所在的window按 =p= 进行粘贴.
而且在Spacemacs中切换window本身也很容易,按下 =SPC-N= 就能切换到第N个window了. 所有这些操作无需鼠标就能搞定了.

** Trying to use Vim as an IDE

有一阵子,我使用Vim来编辑代码,但是在 RStudio 或 PyCharm 这样的IDE中调试代码. 
虽说这些IDE也支持Vim按键,但是要在代码,终端,IDE之间不断切来切去也挺烦的. 而且我常常在一个项目中要用到多种编程语言,这样就需要打开多个特定语言的IDE,简直不能再烦了.
有鉴于此, 我尝试过用 =NerdTree= 和 =Airline= 等插件将Vim打造成一款IDE来用. 然而我从来没有成功地在Vim调试过(网上有人说搞定了,但是他们的解决方法在我这就是不行).

Some may argue against using Emacs as a full-fledged IDE, but it works fine
for
me. For example, I can use Emacs as an R IDE with the Emacs Speaks Statistics
(ESS) package. I can edit, step line by line, and debug a code file; use
R-dired as a variable explorer; and enter console commands all within one
frame. It all feels like a more customizable experience that I have more
control
over than a pre-packaged IDE. Emacs is more than an editor and even more than
an
IDE; some view Emacs as basically a entire operating system (more on this in
the Tetris section).

** Duplicating my setup

I work on many different machines and I like consistency. Unfortunately, I am
also very picky about my setup. Duplicating my Vim setup on a new machine
involved installing Vim, cloning my .vimrc from my Github dotfile repository,
creating a symbolic link from my cloned .vimrc to my ~/.vimrc, downloading the
several Vim themes I like to work with, installing Vundle, and then using
Vundle
to install my Vim packages! Nightmare.

This is somewhat easier with Emacs (but still not without a little manual
labor); here, I first install Emacs (which you have to build from source on
Ubuntu to get an up-to-date version that will work with Spacemacs, which is
why
I ultimately switched to Arch Linux. That’s right, I changed operating systems
because Emacs is easier to install on Arch. My next post ought to be ‘Why I
switched to Arch Linux’), clone my .spacemacs from my Github dotfile
repository,
and create a symbolic link from this .spacemacs to ~/.spacemacs. Upon starting
Emacs, everything is installed for me, including themes. No installing a
package manager like Vundle manually. No downloading theme files individually
(this could be automated with Bash, I admit, but this would still be more work
than it is with Emacs). Installing packages in Emacs, in general, is very
easy.

** Philosophical approach

Some people hate the ‘philosophical baggage’ of the Free Software Foundation
(FSF) (of which Richard Stallman, the creator of Emacs, is Founder and
President), but I think the philosophy is very important. Then again, I am an
idealistic academic. Ironically, I see few academics committed to producing
Free
Software (let alone using Emacs) though most of them are in publicly funded
positions. That said, Emacs introduced me to the FSF and its philosophical
goals, which align with my goals as an academic (the FSF probably wouldn’t
like
that I’m using Arch Linux, but it’s certainly better than Ubuntu).

** Community

The Vim/Emacs debate is often heated, but from what I can tell, Emacs users
are
more passionate. There are a number of Emacs meetups around the country where
*users share their setup and demonstrate useful tricks. Maybe this exists for
Vim, but the Emacs community is more visible. Vim is an incredibly useful
tool.
But Emacs is a lifestyle. That was corny, I know.

* Vim doesn’t have Tetris

Emacs has Tetris and Vim does not. The debate ought to end here.

But seriously, for someone who finds their workflow driven by the terminal,
the
editor, and/or the IDE, this exposes an important aspect of Emacs – You can
live inside it. Here are some things I do in Emacs that I could not do in Vim:

  * Use the terminal (through eshell)
  * Check the weather (using forecast.io/dark sky API)
  * Use Google (using helm-google)
  * Check/send email
  * Write academic papers (using org-mode)
  * Keep track of my todo list and calendar (using org-mode)

Instead of using the terminal to launch Vim and open specific files, Emacs is
always open, and the items above are opened in buffers within Emacs. Some
people complain about the long load time of Emacs, but this is a non-factor
for
me. My workflow is driven by Emacs; I rarely ever close it!

** Org mode

Org mode is absofruitly incredible. Some people use Emacs just for org-mode,
including people who are not programmers. I first learned about some of the
features of org-mode as a tool for writing in this [[https://www.youtube.com/watch?v=FtieBc3KptU][video]], but [[https://www.youtube.com/watch?v=sQS06Qjnkcc&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][these]]
[[https://www.youtube.com/watch?v=SzA2YODtgK4&t][videos]] would also be good starting points for org-mode.

Org mode is a tool for writing, creating outlines, keeping track of your
calendar, and much more. In fact, this post was created exclusively using
Spacemacs/org-mode and then exported to html.

** Emacs is fun to learn

Any Vimscript that I learned was purely out of necessity, and most of the
Vimscript I used was simply copied from the internet and pasted into my
.vimrc.
This was a pretty laborious process that I did not enjoy. Emacs is different.
Creating an Emacs configuration is fun. I find that I actually look forward to
learning Emacs-lisp, and doing so feels more meaningful than learning
Vimscript.
I’m often shocked at what is available in Emacs, and I’m constantly finding
new
ways to improve my workflow with it.

* Conclusion

After being a Vim proselyte and then switching to Emacs, I’ve come to this
conclusion: Vim is not really an editor; it is set a keybindings. Sure, it can
be used as an editor (and I still use it as such occasionally), but Vim’s main
contribution is its keybindings, which are in fact, the best, and utterly
irreplaceable to me (I even use Vim keybindings in my web browsers).

Emacs is not really an editor to me either. The more I use Emacs, the more I
agree that it is virtually an operating system. It can be used as an editor,
an
IDE, a terminal, an email client, a word processor, a calendar, a todo list,
and
a life organizer. The Spacemacs motto sums up the Vim/Emacs debate perfectly:
“The best editor is neither Emacs nor Vim, it’s Emacs and Vim!” The two are
not mutually exclusive. In fact, they work wonderfully together.

Despite this, Spacemacs/Emacs is still not perfect, and I do still find some
barriers when using Emacs:

  * I haven’t found an Emacs terminal that I am completely sold on; that said,
    my
    ideal terminal might not exist yet. Eshell has 95% of what I need (and I
    use
    it the most often) but lacks support for shell input redirection, for
    example.
    When I need this, I open terminator instead. I always have issues getting
    Vim
    keybindings, among other things, to work in Ansiterm and Multiterm, and in
    general these emulators seem clunky.
  * I’m having problems with org-agenda that currently have me relying on
    Google
    Calendar as my main scheduler.
  * Email often has HTML content (which can’t be rendered in Emacs as far as I
    know), so I often use a web client instead.
  * Using interactive shells such as the Mongo Shell (MongoDB) and Psql
    (PostgreSQL) often don’t work as intended, and some of these projects are
    not
    maintained
  * Not everyone uses Emacs, so collaborating on projects can result in extra
    time
    conforming/converting to de facto industry standards. For example, I
    frequently share manuscripts with colleagues, and exporting from the de
    facto
    industry standard word processing program (which will go unnamed) is not
    ideal
    from Emacs. Because of this, I am currently exporting .org documents into
    LibreOffice (which works quite nicely) before sending to colleagues. After
    sending to colleagues however, I have to stick with either LibreOffice or
    the
    unmentionable de facto industry standard so that I can view comments,
    respond
    to comments and track changes. I’ve seen rumors on the internet that this
    can
    be resolved, but I have yet to figure it out.
  * Leaving Emacs to use a web browser is not the end of the world, but it
    would
    be nice to have a high quality web browser inside Emacs.

I have a feeling that much of this could be resolved if I either searched
harder
for a solution, or created solutions myself. All in all, I am much happier
with
my workflow not that I’m using Emacs. If you have recommendations on how I
could
better use Emacs, please let me know!
