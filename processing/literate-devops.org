#+TITLE: 文学化的devops（literate-devops）
#+URL: http://howardism.org/Technical/Emacs/literate-devops.html
#+AUTHOR: lujun9972, KlausZL（译）
#+CATEGORY: raw
#+DATE: [2016-10-31 一 16:55]
#+OPTIONS: ^:{} f:t


Maintaining servers falls into two phases:

1. Bang head until server works
2. Capture effort into some automation tool like Puppet or Chef.

Recently, I’ve been playing around with making the first phase closer to the
second. For lack of a better word, I’m calling it literate devops.

I’ve talked about using [[http://howardism.org/Technical/LP/introduction.html][org-mode’s literate programming model]] to investigate
new ideas and crystallize thoughts, and this approach appears to work well for
me since I lack those esoteric sysadmin skills.

运维服务一般分为两个阶段：

1. 绞尽脑汁直到服务器能正常工作；
2. 努力引入一些自动化工具，例如Puppet和Chef，以提高效率。

最近我一直在致力于使这两个阶段结合更加紧密。由于词穷，我只能将其称为文学化的devops。

我曾在[[http://howardism.org/Technical/LP/introduction.html][《org-mode’s literate programming model》]]一文中讨论过研究出来的一些新想法和总结出来的思路，这些想法和思路为我总结出高超的系统管理技巧提供了良好的帮助。

* Tell us a Story

Once upon a time, I was tasked with patching an RPM, which is not in my
comfort zone, so my initial plan of attack was:

 1. Use Vagrant to create a disposable CentOS system
 2. SSH into this virtual machine to download needed tools
 3. Run various unknown commands
 4. Rinse and repeat this step until successful

Of course, once I figure out the solution, I need to document it for others on
my team, and maybe create a repeatedable script.

First step is well documented elsewhere, but today I learned (TIL) you can ssh
directly to your Vagrant-based virtual machine with this little magic (Note: 
client is the name of my virtual machine I specified in the Vagrantfile):

#+BEGIN_SRC sh
  vagrant ssh-config --host clientvm >> $HOME/.ssh/config
#+END_SRC

This command appends some lovely host-connection magic so you can issue: ssh
clientvm

* 给大家讲个故事

很久以前……我得到了给一个RPM包打补丁的任务，这不是我擅长的事情，所以最初的计划是这样的：

1. 利用Vagrant（一个基于Ruby的工具，用于创建和部署虚拟化开发环境）来创建一个一次性的CentOS系统；
2. SSH远程访问这个虚拟机下载需要的工具；
3. 运行各种难以言表的命令；
4. 推翻重来并反复进行上述过程直到成功。

当然，一旦我找到了解决方法，我需要为团队中的其他成员记录下这些过程，如果条件允许的化我还会创建可重复执行的脚本。

实现这些的第一步是在其它地方很好的记录下连接配置，不过现在我学到了这个小魔法使你可以直接记录SSH连接你用Vagrant创建的虚拟机的配置信息（注：clientvm是我在Vagrantfile文件中制定的虚拟机名称）：

#+BEGIN_SRC sh
  vagrant ssh-config --host clientvm >> $HOME/.ssh/config
#+END_SRC

* Literate Devops
* 文学化的Devops

Instead of opening up a terminal to my virtual machine, I pop into Emacs and
load this sprint’s note file^[[http://howardism.org/Technical/Emacs/literate-devops.html#fn.1][1]], create a new header, and enter the shell and
ruby commands in this text file.

不同于以往打开终端连接到虚拟机的方式，现在我会进入Emacs，打开这些脚本记录文件[fn:1]，创建一个新的标题，并把shell和ruby等命令输入到这个文件中。

What good is this? Unlike a traditional terminal, this allows me to log, 
document and execute each command.

这样做有什么好处呢？不同于传统的终端方式，这样做可以让我执行、记录、追溯任何一条命令。

For instance, here is a screen-shot of a section of my Emacs buffer:

举个例子，以下是我的Emacs窗口的一部分截图：

[[./literate-devops.files/literate-devops.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops.png

As an old bear with very little brains, my prose can explain the background
and purpose of each command. Clicking the hyperlink refreshes my memory of
previous discoveries. A keychord executes the code block…

作为一个记性不太好的老家伙，我的“文学作品”可以解释每一条命令的背景和目的。点击一个超链接，就可以追溯到我之前记录下来的发现结果。一套组合键就能执行需要的代码块……

Yes. I execute the commands from within Emacs.

没错，我就是直接在Emacs中执行需要的命令。

Hitting C-c C-c (Control-C twice) runs the code (based on the language). This
example runs in the shell. The results are placed back into the file, which
can be used by other code blocks (and [[http://orgmode.org/manual/results.html#results][many other options]]).

敲击两次Control-C（Emacs快捷键“C-c C-c”）执行需要的代码（根据不同的语言执行）。上图的例子是在Shell中执行的。执行结果会显示在文件中，执行结果同时也可以被其它代码块调用（当然也可以有[[http://orgmode.org/manual/results.html#results][其它多种选择]]）。

For instance, here is the first half of a section for downloading the GPG Keys
from a repository (the URL is placed in a property that is shared among all
code blocks in his section):

再举个例子，下图是一个从软件仓库中下载GPG密钥的片段的前半部分（在这个片段中指定的URL被安置在了一个作用于整个代码块的属性中）：

[[./literate-devops.files/literate-devops-14.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops-14.png

The Shell script block (in the center of the screen-shot) uses wget to
download the HTML index file and parse and extract the key file URLs. We’ll
have a Ruby script do that parsing, and since the script may be a bit hairy,
we’ll define it in another code block.

这段Shell脚本使用wget命令下载HTML索引文件，分析和提取出密钥文件的URL。我们将使用一个Ruby脚本来完成解析工作，鉴于脚本可能还有点粗糙，我们暂时将其定义在了另一个代码块中。

One technique from [[http://howardism.org/Technical/LP/introduction.html][literate programming]] is the idea that one code block can be
inserted into another block (the reference is a name within double angle
brackets, <<...>>). Donald Knuth called this feature WEB. Since it can
accidentally conflict with some languages (like Ruby), I have it off by
default, but turn it on for this block with the noweb parameter.

在[[http://howardism.org/Technical/LP/introduction.html][《literate programming》]]中提到了一个想法是将一个代码块插入到另一个代码块中的技术（通过将名字放入双层角括号进行引用，<<...>>）。Donald Knuth称这一功能为WEB。由于这有可能和某些语言（例如Ruby）产生预料不到的冲突，我默认情况下会将其关闭，但在这个代码块中我通过noweb参数将其打开。

Here is the Ruby script. Having it in a separate Ruby-specific code block
allows me to turn on all the Ruby magic that Emacs can muster.

下图是Ruby脚本。将其放在一个指定为Ruby的代码块中，我就可以施展所有Emacs允许我施展的Ruby魔法了。

[[./literate-devops.files/literate-devops-15.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops-15.png

The last step is to take the URLs produced by the first script and feed them
to another Shell script that will call wget to download each:

最后一步是将第一个脚本处理过的URL数据传递给另一个Shell脚本,来调用wget下载每一个URL指向的文件：

[[./literate-devops.files/literate-devops-16.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops-16.png

The key-list was the name of our original code block, as well as the name of
its results. We assign that list of results to a variable, LIST that the shell
script would access as $LIST.

key-list被定义在最初的代码块中，作为代码块执行结果的名字。我们声明了一个LIST变量用来保存执行结果列表，这样shell脚本就可以通过$LIST的形式访问LIST变量。

This example demonstrated how literate programming can weave code and data
through different languages.

上述的例子演示了文学化的编程是如何将不同的语言代码和数据糅合在一起产生作用的。

* What about the Virtual Machine?
* 如果是虚拟机的话该怎么办呢？

Normally, specifying sh as the code block’s language, tells Emacs to run the
code in my local system’s shell, but in this case, I want it ran on my virtual
machine (or on my development server in my lab). I’ll describe two options for
doing this, using [[http://www.emacswiki.org/TrampMode][Tramp]] and Babel Sessions.

通常情况下，通过指定代码块语言为sh的方式来告诉Emacs在本地系统shell中执行代码。但是在这个案例中，我希望代码能够在虚拟机上执行（或在我圈养开发服务器上）。接下来我会介绍两种方式来实现这一切，一种是使用[[http://www.emacswiki.org/TrampMode][Tramp]]，而另一种则是使用各种Sessions。

** Tramp to the Rescue
** 搬出Tramp这个救兵

Tramp is an Emacs feature that allows one to edit a file on a remote machine
using ssh and other protocols. For instance, running the find-file function
(bound to C-x C-f) lets you type something like:

Tramp是Emacs提供的一种功能，它允许使用ssh或者其它协议访问和编辑远程主机上的文件。例如你可以输入以下命令，在远程主机上执行find-file功能（Emacs快捷键“C-x C-f”）：

#+BEGIN_SRC emacs-lisp
  /ssh:howard.abrams@goblin.howardism.org:web/files/robot.txt
#+END_SRC

If you put the following in your .emacs initialization file:

前提是你需要在.emacs启动文件中放入如下内容：

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
  ;; linux系统下默认就是ssh可以不用设置
  ;; windows系统下将ssh改为plink（putty的一个模块）。当然windows系统嘛……你懂的，祝你好运！！！
#+END_SRC

And update your ~/.ssh/config file to know what user account goes with the
host name, the file reference above can be shorten to:

同时更新你的~/.ssh/config文件，声明你希望用什么用户访问你指定的服务器，简单来说文件内容就是如下的样子：

#+BEGIN_SRC emacs-lisp
  /goblin.howardism.org:web/files/robot.txt
#+END_SRC

Emacs looks for the : character to determine if Tramp should be invoked. Tramp
uses SSH keys if available, or will prompt you for a password if needed.

Emacs会通过“:”符号后面的内容来决定Tramp要访问的目标。使用SSH keys能方便Tramp的访问，否则就要在提示符下输入密码。

Each org-mode code block can specify a :dir option that specifies where the
code snippet should run, for instance, the following blocks are equivalent:

每个org-mode代码块都可以设置“:dir”来指定代码片段在哪个目录执行。就如同下图中代码块的例子：

[[./literate-devops.files/literate-devops-9.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops-9.png

The :dir option allows full Tramp functionality, allowing me to run a block on
a different machine. Remember how I added my client Vagrant virtual machine to
my ~/.ssh/config file?

“:dir”配置项支持Tramp的全部功能，允许我在不同的主机上执行代码块。还记得我是怎么将Vagrant虚拟主机的连接信息加入到我的~/.ssh/config文件中的么？

[[./literate-devops.files/literate-devops-10.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops-10.png

But I need access to my machine behind a firewall!?

但是如果我要访问防火墙后面的主机该怎么办呢？

My job deals with virtual machines running in a highly protected data center,
where I need to first log into jump boxes and bastion machines. Tramp handles
these sorts of hops. For instance:

我的工作是需要搞定部署在受到严密保护的数据中心的虚拟主机，首先我需要登录到跳板机或者堡垒主机上。Tramp也可以按序处理这些跳跃，比如下面的例子：

#+BEGIN_SRC emacs-lisp
  /ssh:10.98.18.229|ssh:10.0.1.122|sudo:/etc/network/interfaces
#+END_SRC

Uses my account name to log into the bastion machine, and then uses my account
name to ssh into a virtual machine running in a private cloud. And then uses
the sudo command to let me edit a file owned by root.

先使用我的用户登录到堡垒逐句，然后再使用我的用户登录到运行在私有云的虚拟主机上。再然后使用sudo命令让我编辑root权限才能编辑的文件。

Tramp pipe references works with the :dir option for org-mode source blocks:

在org-mode代码块的“:dir”配置项中，也可以使用Tramp的管道符号“|”。

[[./literate-devops.files/literate-devops-11.png]]

原图：http://howardism.org/Technical/Emacs/literate-devops-11.png

Few tricks to keep in mind:

  * All but the last hop uses a pipe character, |, instead of the colon
    character, :
  * If you use the pipe character, you need to specify all protocols, like
    ssh, even if it is the default.
  * If your local machine’s operating system is different than the machine you
    are connecting to, you need to fix a bug in org-mode, which I can show you
    how to fix^[[http://howardism.org/Technical/Emacs/literate-devops.html#fn.2][2]].

一些需要记住的技巧：

  * 在最后一跳不能使用管道符号“|”，而是要用冒号“:”来指定需要访问的目标。
  * 当你使用管道符号“|”的时候，记得声明使用的协议，哪怕使用的协议是默认的。
  * 如果你本地主机的操作系统和远程主机的操作系统不一致，你可能需要修复org-mode中的一个bug，你可以在这里找到修复的方法[fn:2]。

** Using org-mode Sessions

Another approach is to create a session that connects different code blocks
together. Each screen shot below, each code block below has the same session
value, client (which is conveniently the same my virtual machine’s hostname,
client):

[[http://howardism.org/Technical/Emacs/literate-devops-2b.png]]

If I execute the first block, a shell is started in the background, and it
ssh’s into the machine. Note, to get this working, you need to enable 
password-less access by placing your SSH’s public key into the remote system’s
.ssh/authorized_keys file, or using the ssh Emacs package.^[[http://howardism.org/Technical/Emacs/literate-devops.html#fn.3][3]]

From this point on, each code block I execute with the client session value,
uses this connection, and the code is executed on the remote machine (a
virtual machine in this case, but that doesn’t matter).

Either of these approaches works well, but the second approach, allows me to
set variables to create a particular state that other blocks may expect.
However, this requires execution of each block in order.

I have a third, more interactive, approach^[[http://howardism.org/Technical/Emacs/literate-devops.html#fn.4][4]] using screen, but it doesn’t
allow passing variables to the code, and as you’ll see below, this is pretty
important to me.

Regardless, I continue learning how to accomplish my goal, all the while
documenting and validating my steps. The end result can be exported to web or
wiki page.

* What about Verbose Commands?

Yes, executing some commands can be quite time-consuming and verbose, but
often I need to search the results, and having the results placed in an Emacs
buffer allows better searching.

Often I use a collapsible “drawer” (which is just a way to identify the
beginning and end of the output):

[[http://howardism.org/Technical/Emacs/literate-devops-3.png]]

Place the cursor on this drawer and hit the Tab key to hide or show the
output:

[[http://howardism.org/Technical/Emacs/literate-devops-4.png]]

* Can you Use the Output?

The results of some commands are often needed for the next command, and I’m
sure you just love using your mouse to copy and paste part of the output, but
I have a better way.

For instance, I needed a list of an RPM’s dependencies:

[[http://howardism.org/Technical/Emacs/literate-devops-5.png]]

Notice I named this source code block. Also notice how Emacs automatically
broke the results up into a table. By default, the output from shell commands
are split along newlines and spaces.

I can feed the results of these execution to another code block. The following
source block creates a variable named DEPENDS that uses rows 2 through 10 of
the first column as an array.

[[http://howardism.org/Technical/Emacs/literate-devops-6.png]]

I then download the RPMs I want without any mouse interaction.

* Setting Variables and Values

A key aspect of reusing devops programs (like a Chef cookbooks) is the
separation of the code from the values the code uses…a key aspect of any
program you reuse.

In my world, I create a new org-mode file for each sprint, and each task or
problem gets its own header and section. Each section can have a drawer of
properties, including variables shared among all code blocks in that section.

To create a section variable, simply hit: C-c C-x p, and set the Property to
var and the value to a variable=value, as in:

#+BEGIN_EXAMPLE
  host="10.52.224.33"
#+END_EXAMPLE

This drawer can contain any code block values you wish, like session or
results. These values can then be overridden as settings on the code block, as
you see in this screen-shot:

[[http://howardism.org/Technical/Emacs/literate-devops-8.png]]

Setting variables and settings (especially the session setting), ties the code
blocks together.

* Communicating with Others

While investigations in operations and administrations (as I’ve described) are
useful to oneself when understanding the problem domain, I need to communicate
the results with my team mates. Since my [[https://github.com/howardabrams/dot-files/blob/master/emacs-mail.org#sending-email][Emacs configuration]] allows me to send
mail messages, I kick off the function, org-mime-org-buffer-htmlize, which
exports the org-mode file to an HTML mail message (This function is part of
the latest org-plus-contrib package).

However, some times the exported results are not quite perfect.

For instance, some blocks may result in some JSON data, and since the HTML
output can colorize the syntax, if I could just specify that the output
results were JavaScript, then the JSON data would be much prettier. Just use
the wrap parameter, as in:

[[http://howardism.org/Technical/Emacs/literate-devops-20.png]]
[[http://howardism.org/Technical/Emacs/literate-devops-20.txt][{litera}]]

Which puts the following in my org-mode file:

[[http://howardism.org/Technical/Emacs/literate-devops-21.png]]
[[http://howardism.org/Technical/Emacs/literate-devops-21.txt][{litera}]]

Which gets exported like:

#+BEGIN_SRC json
  {"time":{"iso":"2015-05-19T23:12:40Z","timestamp":1432077160,"date":"19 May 2015","time":"7:12 PM"}}
#+END_SRC

For another example, my current project involves working with OpenStack, and
its nova command line utility attempts to format the data as a table:

#+BEGIN_SRC org
  +--------------------------------------+--------------------+--------+------------+-------------+------------------------+
  | ID                                   | Name               | Status | Task State | Power State | Networks               |
  +--------------------------------------+--------------------+--------+------------+-------------+------------------------+
  | f9e7aed8-e425-4808-aace-8758dadd91bf | chefserver         | ACTIVE | -          | Running     | WPC-private=10.0.1.73  |
  | 0432f8b1-7e6d-4fc1-b181-02fa768c38ac | ha-compute1        | ACTIVE | -          | Running     | WPC-private=10.0.1.104 |
  | a5bdd1d0-d4b3-4856-a657-5759356c186b | ha-controller1     | ACTIVE | -          | Running     | WPC-private=10.0.1.97  |
  | 16263972-609e-44c0-83e0-f3147336071c | ha-controller2     | ACTIVE | -          | Running     | WPC-private=10.0.1.99  |
  | 89a89d1f-7be5-4c4f-82db-64b751f15f3b | ha-controller3     | ACTIVE | -          | Running     | WPC-private=10.0.1.100 |
  | b740095a-3f89-45d0-a2a1-9cfcadfb4ca3 | ha-monitoring      | ACTIVE | -          | Running     | WPC-private=10.0.1.95  |
  | 6bebe823-1504-4cb1-a898-bbc7894b1a32 | ha-sdn-controller1 | ACTIVE | -          | Running     | WPC-private=10.0.1.101 |
  | 456bf417-580e-49fb-be08-1b0153710f86 | ha-sdn-controller2 | ACTIVE | -          | Running     | WPC-private=10.0.1.102 |
  | 7aab184c-5fb4-4996-8ab2-8a65ea7668cb | ha-sdn-controller3 | ACTIVE | -          | Running     | WPC-private=10.0.1.103 |
  | 0c90d7b0-dab4-4af8-a970-e2e90dd8b9e4 | ha-storage-1       | ACTIVE | -          | Running     | WPC-private=10.0.1.76  |
  | fda0666e-d656-48fd-928f-83fb47c923f2 | ha-storage-2       | ACTIVE | -          | Running     | WPC-private=10.0.1.81  |
  | 021fc9c1-8d79-4c09-b3d4-6014d242403a | ha-storage-3       | ACTIVE | -          | Running     | WPC-private=10.0.1.96  |
  | bc5ad0fe-9ef2-4966-8d2b-99892f3f94cd | yum-server         | ACTIVE | -          | Running     | WPC-private=10.0.1.74  |
  +--------------------------------------+--------------------+--------+------------+-------------+------------------------+
#+END_SRC

If you manually change the output, those changes will not be honored when the
file is exported (since those are redone during the exporting process).

The way to do that is with a little Emacs Lisp code block that you just need
to place somewhere in your file, like:

[[http://howardism.org/Technical/Emacs/literate-devops-22.png]]
[[http://howardism.org/Technical/Emacs/literate-devops-22.txt][{litera}]]

With this code block named, nova-conv, I can use it to post-process the
results, as in:

[[http://howardism.org/Technical/Emacs/literate-devops-23.png]]
[[http://howardism.org/Technical/Emacs/literate-devops-23.txt][{litera}]]

In my particular case, I also want to get rid of that first line of dashes to
make it more org-mode like:

[[http://howardism.org/Technical/Emacs/literate-devops-24.png]]
[[http://howardism.org/Technical/Emacs/literate-devops-24.txt][{litera}]]

To be truly re-useable, place this code in your [[http://orgmode.org/manual/Library-of-Babel.html][Library of Babel]], and then it
is available from any file.

* Summary

While my literate devops approach shouldn’t replace real DevOps (OpsDev?)
automation, I have found this approach useful for two reasons:

 1. As a good way to take notes before writing a cookbook.
 2. As an easy approach to compose emails to teammates when stuck.

Regarding the last point, I often write my literate files in the past tense,
even before I write and execute the code, as in:

[[http://howardism.org/Technical/Emacs/literate-devops-25.png]]
[[http://howardism.org/Technical/Emacs/literate-devops-25.txt][{litera}]]

Then, if the command or process I’m following fails, I can simply high-light a
section of my document, hit C-x M to email an exported HTML version to the
rest of the team (otherwise, I’d spend hours copy/pasting back from the
terminal in order to provide sufficient context for the email).

Need a complete example? Check out my [[http://howardism.org/Technical/Emacs/linux-iptables.html][notes on setting up IP Tables]] (and the 
[[http://howardism.org/Technical/Emacs/linux-iptables.org.txt][original org-mode file]]), where part of the file can be executed in the editor
in order to see how my machines are configured, and the other part is a script
that can be tangled to a machine and executed to reset to the firewall rules.

Thanks for reading.

* Footnotes:

^[[http://howardism.org/Technical/Emacs/literate-devops.html#fnr.1][1]]

For each new sprint, I create an [[http://orgmode.org/][org-mode formatted file]] to keep track of
tasks, notes, and other details. This makes it ideal for embedding a bit of 
literate devops.

[fn:1] 

我会为每个新脚本创建一个[[http://orgmode.org][org-mode格式的文件]]，用来跟踪任务，备注和记录其它细节。这使得它非常契合文学化devops。

^[[http://howardism.org/Technical/Emacs/literate-devops.html#fnr.2][2]]

[fn:2] 

Every operating system creates temporary files in different directory
locations. Most Unix systems, use /tmp/, but Macs use /var/folders/. The
current org-mode code uses the same directory name on the remote system that
would work on the local system. In my case, I’m using my Mac laptop at work to
connect to a Linux system in my data center, and I get the following error:

#+BEGIN_EXAMPLE
  Tramp: Decoding remote file `/ssh:x.y.z:/var/folders/0s/pcrc3rq5075gj4tm90pbh76c36sl1h/T/ob-input-32379ujY' using `base64 -d -i >%s'...failed
  byte-code: Couldn't write region to `/ssh:x.y.z:/var/folders/0s/pcrc3rq5075gj4tm90pbh76c36sl1h/T/ob-input-32379ujY', decode using `base64 -d -i >%s' failed
#+END_EXAMPLE

The bug is in org-mode version 8.2.10 (and probably earlier), as I found in 
[[http://lists.gnu.org/archive/html/emacs-orgmode/2013-09/msg00992.html][this mailing list posting]] (and it may not be fixed for a while since it isn’t
real clear what the best solution would be). To fix it yourself, edit
ob-core.el file in the org-babel-temp-file function to be:

#+BEGIN_SRC emacs-lisp
  (defun org-babel-temp-file (prefix &optional suffix)
    "Create a temporary file in the `org-babel-temporary-directory'.
  Passes PREFIX and SUFFIX directly to `make-temp-file' with the
  value of `temporary-file-directory' temporarily set to the value
  of `org-babel-temporary-directory'."
    (if (file-remote-p default-directory)
        (let ((prefix
               ;; We cannot use `temporary-file-directory' as local part
               ;; on the remote host, because it might be another OS
               ;; there.  So we assume "/tmp", which ought to exist on
               ;; relevant architectures.
               (concat (file-remote-p default-directory)
                       ;; REPLACE temporary-file-directory with /tmp:
                       (expand-file-name prefix "/tmp/"))))
          (make-temp-file prefix nil suffix))
      (let ((temporary-file-directory
             (or (and (boundp 'org-babel-temporary-directory)
                      (file-exists-p org-babel-temporary-directory)
                      org-babel-temporary-directory)
                 temporary-file-directory)))
        (make-temp-file prefix nil suffix))))
#+END_SRC

^[[http://howardism.org/Technical/Emacs/literate-devops.html#fnr.3][3]]

If you install the [[https://github.com/ieure/ssh-el#start-of-content][ssh.el]] project, you would initially connect to your remote
system using: M-x ssh

You would then enter the host connection information, including the password
(if needed), etc. For instance, if I connected to my host:
goblin.howardism.org, then my code blocks would refer to a session like this:

#+BEGIN_SRC org
  ,#+begin_src sh :session *ssh goblin.howardism.org* :var dir="/opt"
     ls $dir
  ,#+end_src
#+END_SRC

This is allows you to watch your code execute on the remote system, but still
allow a fully functional code blocks that can read values from other parts of
the org-mode file.

Note: The value to the session parameter is surrounded by * characters (part
of the buffer name), but the variables you want to pass in are surrounded by
quotes (otherwise, they are interpreted as named references to tables
elsewhere in the document).

^[[http://howardism.org/Technical/Emacs/literate-devops.html#fnr.4][4]]

I have a third way of executing remote commands, and this uses the ob-screen
extension (located in the [[http://orgmode.org/worg/org-contrib/][org-mode Contrib]] collection). It uses both Gnu
screen and xterm, so on my Mac, I start XQuartz (the built-in X Windows
emulator), and add the following to my .emacs initialization (based on [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-screen.html][these]]
[[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-screen.html][instructions]]) to set the full path to my xterm program:

#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args:screen
        '((:results  . "silent")
          (:session  . "default")
          (:cmd      . "bash")
          (:terminal . "/opt/X11/bin/xterm")))
#+END_SRC

I don’t often use screen, but I install using Homebrew:

#+BEGIN_SRC sh
  brew install screen
#+END_SRC

And then tell ob-screen how to find it:

#+BEGIN_SRC emacs-lisp
  (setq org-babel-screen-location "/usr/local/bin/screen")
#+END_SRC

The code blocks are now specified as screen, and I typically specify which
xterm window to use by setting the :session parameter:

#+BEGIN_SRC org
  ,#+BEGIN_SRC screen :session blah
  ls /Applications

  ,#+END_SRC
#+END_SRC

The results do not get placed into my Emacs file buffer, but are simply left,
as is, in the xterm window.

The other down-side to using screen is it doesn’t pass in variables. For
instance, the following doesn’t work:

#+BEGIN_SRC org
  ,#+begin_src screen :session blah :var dir="/Applications"
  ls $dir

  ,#+end_src
#+END_SRC

Seeing the back-and-forth results in the xterm window is nice, but not being
able to bring the results back into the file for further processing is
limited. Also, you must resist the temptation to fix a command by typing in
the xterm window. If you go down that path, you may forget to put that
information back into your org-mode file, and may regret it later.
