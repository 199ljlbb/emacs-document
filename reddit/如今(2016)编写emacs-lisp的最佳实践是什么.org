#+TITLE: 如今(2016)编写emacs-lisp的最佳实践是什么
#+URL: https://www.reddit.com/comments/43nh3h
#+AUTHOR: lujun9972
#+CATEGORY: reddit
#+DATE: [2016-09-06 二 21:54]
#+OPTIONS: ^:{}

+ Rejeep编写了许多现代化的工具,因此你应该多看看他的博客,尤其是[[http://rejeep.github.io/emacs/cask/ert/ert-runner/ert-async/ecukes/testing/travis/2014/01/09/various-testing-tools-in-emacs.html][这篇文章]]

+ 你可以仿照[[https://github.com/davidshepherd7/electric-operator][这个package]] 复用它的 =Makefile=, =Cask=, =.travis.yml= 文件以及它的package heade

+ If your package has a non-trivial UI (i.e. more than just providing some functions for the user to call) then use [[https://github.com/ecukes/ecukes][ecukes]] to write integration tests.
   
+ Use Travis to compile (with warnings) and test your package on various emacs versions (using evm).
   
+ Use ert to write unit tests for lisp functions.
   
+ Use Cask to manage your dependencies (so that you can easily use Travis, and you can develop with dependencies that you don't want to install globally).
   
+ Names is nice, but I think nameless is the future. I've had at least one contributor who was confused by names.
   
+ You shouldn't depend on packages from melpa unstable, use melpa stable instead.
   
+ [[https://github.com/magnars/dash.el][dash]], [[https://github.com/magnars/dash.el][s]], etc. are nice and since we have Cask and package.el there should be no problem with using them. But you should probably try using the new built-in equivalents in [[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-seq-el.html][seq.el]], [[http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-new-string-manipulation-functions/][subr-x.el]] etc. first.
   
+ Use lexical scoping by putting ;;; -*- lexical-binding: t; -*- [[http://irreal.org/blog/?p=628][on the first line of each file]] (if you aren't sure what that means: basically it just makes variable scope behave in the same way as other modern languages).
   
+ Add your package to melpa (or marmalade if you prefer, not sure what the difference is) so that people can install it easily.
